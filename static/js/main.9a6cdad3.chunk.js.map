{"version":3,"sources":["utils/index.ts","utils/BinaryIndexedTree.ts","utils/RankReproducer.ts","pages/chart/RankLineChartLabel.tsx","pages/chart/RankLineChartTooltip.tsx","pages/chart/RankLineChart.tsx","utils/Data.ts","pages/chart/FormBlock.tsx","pages/chart/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dateToString","_date","format","year","getFullYear","toString","month","getMonth","slice","date","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","replace","BinaryIndexedTree","_length","data","length","this","Array","fill","k","ret","x","l","r","sum","ContestUserState","taskScoreMap","score","afterTargetUser","Map","contestSubmission","val","has","task","curVal","get","set","getRankSequence","user","contestSubmissions","some","user_name","userLength","scoreSet","Set","add","userSubmissionsMap","forEach","push","size","userSubmissions","contestUserState","addSubmission","scores","from","values","sort","a","b","compress","index","bit","curScore","curRank","seq","userStateMap","tmpUserState","oldScore","newScore","oldIndex","newIndex","query","type","time_unix","rank","status","overtakeUserName","overtakeUserOldScore","overtakeUserNewScore","RankLineChartLabel","props","y","color","rankChartDataSequence","undefined","text","i","j","ordinalSuffixOf","fillId","width","height","id","floodColor","in","operator","filter","fontSize","RankLineChartTooltip","active","payload","label","className","style","margin","padding","backgroundColor","border","whiteSpace","Date","map","payloadContainer","curPayload","name","marginTop","marginBottom","stroke","display","paddingTop","paddingBottom","element","getTicks","contest","contestDurationHours","end_time_unix","start_time_unix","interval_sec","cur","getTickFormatter","chartLineColors","RankLineChart","users","showDots","showACLabels","textAlign","sequences","every","entry","maxRankText","reduce","prev","rankChartdata","maxtime","maxrank","tweetTitle","join","contest_name","ResponsiveContainer","LineChart","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","domain","tickFormatter","ticks","value","offset","position","YAxis","angle","reversed","Tooltip","content","Legend","Line","dot","fillOpacity","strokeWidth","LabelList","TwitterShareButton","url","window","location","href","title","TwitterIcon","round","fetchContestSubmissions","fetch","process","then","json","Promise","resolve","fetchContests","getContestDropdownLabel","FormBlock","paramUsers","paramContest","contests","useState","setContest","setUser","chartPagePath","useMemo","generatePath","Row","Col","sm","FormGroup","Label","Input","onChange","e","target","_contest","contest_slug","for","placeholder","Button","tag","NavLink","to","block","ChartPage","connect","contestsFetch","contestSubmissionsFetch","comparison","match","params","fulfilled","paramUser","setShowDots","setShowACLabels","split","_user","trim","contestMap","prevMap","rel","check","checked","App","Navbar","light","expand","fixed","NavbarBrand","Link","Container","maxWidth","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a6cdad3.chunk.js","sourcesContent":["\nexport const dateToString = (_date: Date, format: string = 'YYYY-MM-DD hh:mm:ss'): string => {\n  const year = _date.getFullYear().toString();\n  const month = ('0' + (1 + _date.getMonth())).slice(-2);\n  const date = ('0' + _date.getDate()).slice(-2);\n  const hours = ('0' + _date.getHours()).slice(-2);\n  const minutes = ('0' + _date.getMinutes()).slice(-2);\n  const seconds = ('0' + _date.getSeconds()).slice(-2);\n\n  return format\n    .replace(/YYYY/g, year)\n    .replace(/MM/g, month)\n    .replace(/DD/g, date)\n    .replace(/hh/g, hours)\n    .replace(/mm/g, minutes)\n    .replace(/ss/g, seconds)\n};\n\n/**\n * returns suffix string of order, e.g. \"st\" of \"1st\".\n *\n * @param {number} i number representing order\n * @returns suffix string of order\n */\nexport const ordinalSuffixOf = (i: number): 'st' | 'nd' | 'rd' | 'th' => {\n  const j = i % 10;\n  const k = i % 100;\n  if (j === 1 && k !== 11) {\n    return 'st';\n  }\n  if (j === 2 && k !== 12) {\n    return 'nd';\n  }\n  if (j === 3 && k !== 13) {\n    return 'rd';\n  }\n  return 'th';\n};","export class BinaryIndexedTree {\n  data: number[];\n  length: number;\n  constructor(_length: number) {\n    this.length = _length;\n    this.data = Array(++_length).fill(0);\n  }\n  sum(k: number): number {\n    let ret: number = 0;\n    for (++k; k > 0; k -= k & -k) ret += this.data[k];\n    return ret;\n  }\n  add(k: number, x: number): void {\n    for (++k; k < this.data.length; k += k & -k) this.data[k] += x;\n  }\n  // query for [l, r)\n  query(l: number, r: number): number { return this.sum(r - 1) - this.sum(l - 1); }\n}","import Submission from \"../interfaces/Submission\";\nimport { BinaryIndexedTree } from \"./BinaryIndexedTree\";\n\nclass ContestUserState {\n  taskScoreMap: Map<string, number>;\n  score: number;\n  afterTargetUser: boolean;\n  constructor() {\n    this.taskScoreMap = new Map<string, number>();\n    this.score = 0;\n    this.afterTargetUser = false;\n  }\n  addSubmission(contestSubmission: Submission): void {\n    let val = contestSubmission.score;\n    if (this.taskScoreMap.has(contestSubmission.task)) {\n      const curVal = this.taskScoreMap.get(contestSubmission.task) as number;\n      if (curVal > val) return;\n      this.score += (val - curVal);\n    } else {\n      this.score += val;\n    }\n    this.taskScoreMap.set(contestSubmission.task, val);\n  }\n}\n\nexport interface RankChartData {\n  user: string;\n  time_unix: number;\n  rank: number;\n  score: number;\n  type: 'update' | 'overtook';\n  task: string;\n  status: string;\n  oldScore?: number;\n  overtakeUserName?: string;\n  overtakeUserOldScore?: number;\n  overtakeUserNewScore?: number;\n}\n\nexport const getRankSequence = (user: string, contestSubmissions: Submission[]): RankChartData[] => {\n  if (!contestSubmissions.some((contestSubmission: Submission): boolean => (contestSubmission.user_name === user))) {\n    return [] as RankChartData[];\n  }\n  // assert ユーザがいる\n\n  // 一度目のシミュレート（各ユーザの得点計算のみ）\n  const scoreSet = new Set<number>();\n  scoreSet.add(0);\n  let userLength;\n  {\n    const userSubmissionsMap = new Map<string, Submission[]>();\n    contestSubmissions.forEach((contestSubmission: Submission): void => {\n      if (userSubmissionsMap.has(contestSubmission.user_name)) {\n        userSubmissionsMap.get(contestSubmission.user_name)?.push(contestSubmission);\n      } else {\n        userSubmissionsMap.set(contestSubmission.user_name, [contestSubmission]);\n      }\n    });\n    userLength = userSubmissionsMap.size;\n\n    userSubmissionsMap.forEach((userSubmissions: Submission[], user_name: string): void => {\n      const contestUserState = new ContestUserState();\n      userSubmissions.forEach((contestSubmission: Submission): void => {\n        contestUserState.addSubmission(contestSubmission);\n        scoreSet.add(contestUserState.score);\n      });\n    });\n  }\n\n  // 得点一覧を生成\n  const scores: number[] = Array.from(scoreSet.values());\n  void scores.sort((a, b) => a - b);\n\n  // 座圧用辞書を作成\n  const compress = new Map<number, number>();\n  scores.forEach((score: number, index: number): void => {\n    compress.set(score, index);\n  });\n\n  // 二度目のシミュレート（各段階における順位の計算）\n  const bit: BinaryIndexedTree = new BinaryIndexedTree(scores.length); // 各得点に何人いるか\n  bit.add(compress.get(0) as number, userLength); // 全員を 0 点として扱う\n  let curScore = 0;\n  let curRank = 1;\n  const seq: RankChartData[] = [];\n  {\n    const userStateMap = new Map<string, ContestUserState>();\n    contestSubmissions.forEach((contestSubmission: Submission): void => {\n      if (!userStateMap.has(contestSubmission.user_name)) {\n        const tmpUserState = new ContestUserState();\n        tmpUserState.afterTargetUser = true;\n        userStateMap.set(contestSubmission.user_name, tmpUserState);\n      }\n      const contestUserState = userStateMap.get(contestSubmission.user_name) as ContestUserState;\n      const oldScore = contestUserState.score;\n      // const oldAfterTargetUser = contestUserState.afterTargetUser;\n      contestUserState.addSubmission(contestSubmission);\n      // contestUserState.afterTargetUser = false;\n      const newScore = contestUserState.score;\n      if (newScore !== oldScore) { // スコア更新\n        const oldIndex = compress.get(oldScore) as number;\n        const newIndex = compress.get(newScore) as number;\n        bit.add(oldIndex, -1);\n        bit.add(newIndex, 1);\n        if (contestSubmission.user_name === user) {\n          // curScore 以上の得点を取っている人数が順位\n          curScore = newScore;\n          curRank = bit.query(newIndex, scores.length);\n          seq.push({\n            user: user,\n            type: 'update',\n            time_unix: contestSubmission.time_unix,\n            rank: curRank,\n            score: newScore,\n            oldScore: oldScore,\n            task: contestSubmission.task,\n            status: contestSubmission.status,\n          });\n        } else {\n          if (newScore < curScore) {\n            // 追い越さなかった\n            contestUserState.afterTargetUser = false;\n            return;\n          } else if (newScore === curScore) { // 同点になったけど追い越さなかった\n            contestUserState.afterTargetUser = true;\n            return;\n          } else { // 追い越したか，あるいは最初から高い順位にいるか\n            if (oldScore > curScore) {\n              // 最初から得点が高い\n              contestUserState.afterTargetUser = false;\n              return;\n            } else if (oldScore === curScore && !contestUserState.afterTargetUser) {\n              // ターゲットユーザよりも先に今の得点を取っていた\n              return;\n            }\n            // assert 追い越した\n            // console.log(`${oldScore} -> (${curScore}) -> ${newScore}`);\n            seq.push({\n              user: user,\n              type: 'overtook',\n              time_unix: contestSubmission.time_unix,\n              rank: ++curRank,\n              score: curScore,\n              overtakeUserName: contestSubmission.user_name,\n              overtakeUserOldScore: oldScore,\n              overtakeUserNewScore: newScore,\n              task: contestSubmission.task,\n              status: contestSubmission.status,\n            });\n            contestUserState.afterTargetUser = false;\n          }\n        }\n      }\n    });\n  }\n  return seq;\n}","import React from \"react\";\nimport { ordinalSuffixOf } from \"../../utils\";\nimport { RankChartData } from \"../../utils/RankReproducer\";\n\ninterface Props {\n  index?: number;\n  offset?: number;\n  position?: string;\n  value?: number;\n  viewBox?: {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n  };\n  x?: number;\n  y?: number;\n  color: string;\n  rankChartDataSequence: RankChartData[];\n}\n\nexport const RankLineChartLabel: React.FC<Props> = (props) => {\n  const { index, x, y, color, rankChartDataSequence } = props;\n  if (index === undefined) return <></>;\n  if (x === undefined || y === undefined) return <></>;\n  const data: RankChartData = rankChartDataSequence[index];\n  if (data.type !== 'update') return <></>;\n  const fontSize = 14;\n  const offset = 10;\n  const text = `${data.rank}${ordinalSuffixOf(data.rank)}`;\n  const fillId = `solid-${data.user}-${index}`;\n  return (\n    <g>\n      <defs>\n        <filter x=\"-0.05\" y=\"-0.07\" width=\"1.1\" height=\"1.1\" id={fillId}>\n          <feFlood floodColor={color} />\n          <feComposite in=\"SourceGraphic\" operator=\"xor\" />\n        </filter>\n      </defs>\n      <text filter={`url(#${fillId})`} x={x} y={y - offset} fontSize={fontSize} fill='none'>{text}</text>\n      <text x={x} y={y - offset} fontSize={fontSize} fill='white'>{text}</text>\n    </g>\n  );\n}","import React from 'react';\nimport { dateToString } from '../../utils';\nimport { RankChartData } from '../../utils/RankReproducer';\n\ninterface RankLineChartTooltipPayloadContainer {\n  color: string;\n  dataKey: string; // rank\n  fill: string;\n  name: string; // atcoder user name\n  stroke: string;\n  strokeWidth: number;\n  value: number;\n  payload: RankChartData;\n}\n\ninterface Props {\n  active?: boolean;\n  payload?: RankLineChartTooltipPayloadContainer[];\n  label?: number;\n}\n\nexport const RankLineChartTooltip: React.FC<Props> = (props) => {\n  const { active, payload, label } = props;\n  if (!active || payload === undefined || label === undefined) return <></>;\n  return (\n    <div\n      className=\"recharts-default-tooltip\"\n      style={{\n        margin: '0px',\n        padding: '10px',\n        backgroundColor: 'rgb(255, 255, 255)',\n        border: '1px solid rgb(204, 204, 204)',\n        whiteSpace: 'nowrap',\n      }}\n    >\n      <p className=\"recharts-tooltip-label\" style={{ margin: '0px' }}>\n        {dateToString(new Date(label * 1000))}\n      </p>\n      {payload.map((payloadContainer: RankLineChartTooltipPayloadContainer) => {\n        const curPayload: RankChartData = payloadContainer.payload;\n        if (payloadContainer.name !== curPayload.user || label !== curPayload.time_unix) {\n          return undefined;\n        }\n        return (\n          <div key={payloadContainer.name}>\n            <hr style={{ marginTop: \"0.3em\", marginBottom: \"0.3em\" }} />\n            <div style={{ color: payloadContainer.stroke }} >{`User: ${payloadContainer.name}`}</div>\n            <ul\n              className=\"recharts-tooltip-item-list\"\n              style={{ padding: '0px', margin: '0px' }}\n            >\n              <li\n                className=\"recharts-tooltip-item\"\n                style={{\n                  display: 'block',\n                  paddingTop: '4px',\n                  paddingBottom: '4px',\n                  color: 'rgb(136, 132, 216)',\n                }}\n              >\n                <span className=\"recharts-tooltip-item-name\">Rank</span>\n                <span className=\"recharts-tooltip-item-separator\"> : </span>\n                <span className=\"recharts-tooltip-item-value\">\n                  {curPayload.rank}\n                </span>\n                <span className=\"recharts-tooltip-item-unit\" />\n              </li>\n            </ul>\n            <div style={{ fontSize: 10 }}>\n              {curPayload.type === 'update' ? (\n                <>\n                  <div>得点を更新しました:</div>\n                  <div>{`${curPayload.oldScore} → ${curPayload.score} (${curPayload.task} ${curPayload.status})`}</div>\n                </>\n              ) : (\n                <>\n                  <div>{`${curPayload.overtakeUserName} さんに追い抜かれました:`}</div>\n                  <div>{`${payloadContainer.name}: ${curPayload.score}`}</div>\n                  <div>{`${curPayload.overtakeUserName}: ${curPayload.overtakeUserOldScore} → ${curPayload.overtakeUserNewScore} (${curPayload.task} ${curPayload.status})`}</div>\n                </>\n              )}\n            </div>\n          </div>\n        )\n      }).filter(element => element !== undefined)}\n    </div>\n  );\n};","import React from \"react\";\nimport { TwitterIcon, TwitterShareButton } from \"react-share\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Label, LabelList } from 'recharts';\nimport Contest from \"../../interfaces/Contest\";\nimport Submission from \"../../interfaces/Submission\";\nimport { dateToString } from \"../../utils\";\nimport { getRankSequence, RankChartData } from \"../../utils/RankReproducer\";\nimport { RankLineChartLabel } from \"./RankLineChartLabel\";\nimport { RankLineChartTooltip } from \"./RankLineChartTooltip\";\n\ninterface Props {\n  users: string[];\n  contest?: Contest;\n  contestSubmissions: Submission[];\n  showDots: boolean;\n  showACLabels: boolean;\n}\n\nconst getTicks = (contest: Contest): number[] => {\n  const contestDurationHours = (contest.end_time_unix - contest.start_time_unix) / 3600;\n  let interval_sec = 3600;\n  if (contestDurationHours <= 12) {\n    interval_sec = 3600; // 12 時間以内なら 1 時間ごとに\n  } else if (contestDurationHours <= 24) {\n    interval_sec = 3600 * 2; // 24 時間以内なら 2 時間ごとに\n  } else if (contestDurationHours <= 24 * 3) {\n    interval_sec = 3600 * 6; // 3 日以内なら 6 時間ごとに\n  } else {\n    interval_sec = 3600 * 24; // 1 日ごと\n  }\n  const ret: number[] = [contest.start_time_unix];\n  for (let cur = contest.start_time_unix - ((contest.start_time_unix + 3600 * 9) % interval_sec) + interval_sec;\n    cur < contest.end_time_unix; cur += interval_sec) {\n    ret.push(cur);\n  }\n  ret.push(contest.end_time_unix);\n  return ret;\n};\n\nconst getTickFormatter = (contest: Contest): ((time_unix: number) => string) => {\n  const contestDurationHours = (contest.end_time_unix - contest.start_time_unix) / 3600;\n  let format = '';\n  if (contestDurationHours <= 12) {\n    format = 'hh:mm'; // 12 時間以内なら 1 時間ごとに\n  } else if (contestDurationHours <= 24) {\n    format = 'hh:mm'; // 24 時間以内なら 2 時間ごとに\n  } else if (contestDurationHours <= 24 * 3) {\n    format = 'MM/DD hh:mm'; // 3 日以内なら 6 時間ごとに\n  } else {\n    format = 'MM/DD'; // 1 日ごと\n  }\n  return ((time_unix: number) => dateToString(new Date(time_unix * 1000), format));\n};\n\nconst chartLineColors = ['#1F77B4', '#FF7F0E', '#2CA02C', '#D62728', '#9467BD', '#8C564B', '#E377C2', '#7D7F7F', '#BCBD22', '#17BECF'];\n\nexport const RankLineChart: React.FC<Props> = (props) => {\n  const { users, contest, contestSubmissions, showDots, showACLabels } = props;\n  if (!contest || users.length === 0) {\n    return (\n      <div style={{ height: '50px' }}></div>\n    );\n  }\n  if (contestSubmissions.length === 0) {\n    return (\n      <div style={{ width: '100%', height: '500px', textAlign: 'center', marginTop: '100px', marginBottom: '100px' }}>Fetch data...</div>\n    );\n  }\n\n  const sequences: [string, RankChartData[]][] = users.map(user => [user, getRankSequence(user, contestSubmissions)]);\n  if (sequences.every(entry => entry[1].length === 0)) {\n    return (\n      <div style={{ width: '100%', height: '500px', textAlign: 'center', marginTop: '100px', marginBottom: '100px' }}>Invalid UserName</div>\n    );\n  }\n\n  let maxRankText = '';\n  if (sequences.length === 1) {\n    const [maxtime, maxrank] = sequences[0][1].reduce(\n      (prev: [number, number], rankChartdata: RankChartData): [number, number] => {\n        if (rankChartdata.type !== 'update') return prev;\n        const prevRank = prev[1];\n        if (prevRank < rankChartdata.rank) return prev;\n        return [rankChartdata.time_unix, rankChartdata.rank];\n      }, [-1, contestSubmissions.length] as [number, number]);\n    maxRankText = `\\n最大瞬間風速は ${maxrank} 位 (${dateToString(new Date(maxtime * 1000), 'MM/DD hh:mm')}) だよ！`;\n  }\n  const tweetTitle = `${users.join(',')}'s replay of ${contest.contest_name}\n${maxRankText}\nAtCoder Marathon Replay`;\n\n  return (\n    <>\n      <h4 style={{ textAlign: 'center', marginTop: '50px', marginBottom: '-30px' }}>Replay of {contest.contest_name}</h4>\n      <div style={{ width: '100%', height: '500px', marginTop: '50px' }}>\n        <ResponsiveContainer>\n          <LineChart\n            width={1000}\n            height={500}\n            margin={{\n              top: 20,\n              right: 20,\n              bottom: 20,\n              left: 20,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis type=\"number\" dataKey=\"time_unix\" name=\"unixtime\" domain={[contest.start_time_unix, contest.end_time_unix]}\n              tickFormatter={getTickFormatter(contest)} ticks={getTicks(contest)}>\n              <Label value=\"Datetime\" offset={0} position=\"insideBottom\" />\n            </XAxis>\n            <YAxis type=\"number\" name=\"rank\" label={{ value: 'Rank', angle: -90, position: 'insideLeft' }} reversed />\n            <Tooltip\n              content={\n                <RankLineChartTooltip />\n              }\n            />\n            <Legend />\n            {\n              sequences.map((entry: [string, RankChartData[]], index: number) => {\n                const [user, seq] = entry;\n                return (\n                  <Line\n                    key={user}\n                    data={seq}\n                    name={user} dataKey=\"rank\" type='stepAfter'\n                    stroke={chartLineColors[index % chartLineColors.length]}\n                    dot={showDots && { fillOpacity: 0.2, strokeWidth: 1 }}>\n                    {showACLabels && (\n                      <LabelList dataKey=\"label\" position=\"top\" content={\n                        <RankLineChartLabel\n                          color={chartLineColors[index % chartLineColors.length]}\n                          rankChartDataSequence={seq} />\n                      } />\n                    )}\n                  </Line>\n                );\n              })\n            }\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n\n      <div style={{ textAlign: 'center' }}>\n        <TwitterShareButton url={window.location.href} title={tweetTitle}>\n          <TwitterIcon size={40} round />\n        </TwitterShareButton>\n      </div>\n    </>\n  );\n};","import Contest from \"../interfaces/Contest\";\nimport Submission from \"../interfaces/Submission\";\n\nexport const fetchContestSubmissions = async (contest?: string): Promise<Submission[]> =>\n  (contest !== undefined && contest.length > 0)\n    ? fetch(`${process.env.PUBLIC_URL}/submissions/${contest}.json`)\n      .then((r) => r.json() as Promise<Submission[]>)\n    : Promise.resolve([]);\n\nexport const fetchContests = async (): Promise<Contest[]> =>\n  fetch(`${process.env.PUBLIC_URL}/contests/contests.json`)\n    .then((r) => r.json() as Promise<Contest[]>);","import React, { useState, useMemo } from \"react\";\nimport {\n  NavLink,\n} from \"react-router-dom\";\nimport {\n  Button,\n  Input,\n  Row,\n  FormGroup,\n  Label,\n  Col,\n} from \"reactstrap\";\nimport Contest from \"../../interfaces/Contest\";\nimport { dateToString } from \"../../utils\";\n\ninterface Props {\n  paramUsers: string;\n  paramContest: string;\n  contests: Contest[];\n}\n\nconst generatePath = (contest: string, user: string): string => `/chart/${contest}/${user}`;\nconst getContestDropdownLabel = (contest: Contest): string =>\n  `${dateToString(new Date(contest.start_time_unix * 1000), 'YYYY-MM-DD')}　${contest.contest_name}`;\n\nexport const FormBlock: React.FC<Props> = (props) => {\n  const { paramUsers, paramContest, contests } = props;\n  const [contest, setContest] = useState(paramContest !== '' ? paramContest : 'ahc001');\n  const [user, setUser] = useState(paramUsers);\n  const chartPagePath = useMemo(() => generatePath(contest, user), [contest, user]);\n\n  return (\n    <>\n      <Row>\n        <Col sm={12}>\n          <FormGroup style={{ width: '100%' }}>\n            <Label>CONTEST:</Label>\n            <Input type=\"select\" name=\"input-contest\" id=\"input-contest\"\n              value={contest}\n              onChange={(e): void => setContest(e.target.value)}>\n              {contests.map((_contest: Contest) => {\n                return (\n                  <option\n                    value={_contest.contest_slug}\n                    key={_contest.contest_slug}\n                  >{getContestDropdownLabel(_contest)}</option>\n                )\n              })}\n            </Input>\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12}>\n          <FormGroup style={{ width: '100%' }}>\n            <Label for='input-user'>ATCODER ID (COMMA SEPARATED):</Label>\n            <Input\n              value={user}\n              type=\"text\"\n              name=\"input-user\"\n              id=\"input-user\"\n              placeholder={user ? user : \"user1,user2,...\"}\n              onChange={(e): void => setUser(e.target.value)}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12}>\n          <Button color=\"primary\" tag={NavLink} to={chartPagePath} block>\n            Replay!\n          </Button>\n        </Col>\n      </Row>\n    </>\n  )\n}","import React, { useState } from \"react\";\nimport {\n  Input,\n  Row,\n  FormGroup,\n  Label,\n  Col,\n} from \"reactstrap\";\nimport { connect, PromiseState } from \"react-refetch\";\nimport { RankLineChart } from \"./RankLineChart\";\nimport { fetchContests, fetchContestSubmissions } from \"../../utils/Data\";\nimport Contest from \"../../interfaces/Contest\";\nimport Submission from \"../../interfaces/Submission\";\nimport { FormBlock } from \"./FormBlock\";\n\ninterface OuterProps {\n  match: {\n    params: {\n      contest: string;\n      user: string;\n    }\n  }\n}\n\ninterface InnerProps extends OuterProps {\n  readonly contestsFetch: PromiseState<Contest[]>;\n  readonly contestSubmissionsFetch: PromiseState<Submission[]>;\n}\n\nconst InnerChartPage: React.FC<InnerProps> = (props) => {\n  const { contestsFetch, contestSubmissionsFetch } = props;\n  const contests: Contest[] = contestsFetch.fulfilled ? contestsFetch.value : [];\n  const contestSubmissions: Submission[] = contestSubmissionsFetch.fulfilled\n    ? contestSubmissionsFetch.value\n    : [];\n\n  const paramContest: string = props.match.params.contest ?? \"\";\n  const paramUser: string = props.match.params.user ?? \"\";\n  const [showDots, setShowDots] = useState(true);\n  const [showACLabels, setShowACLabels] = useState(true);\n\n  const users = paramUser.split(',').map(_user => _user.trim()).filter(_user => _user !== '');\n\n  const contestMap = contests.reduce((prevMap: Map<string, Contest>, contest: Contest): Map<string, Contest> =>\n    prevMap.set(contest.contest_slug, contest)\n    , new Map<string, Contest>());\n  return (\n    <>\n      <h2>Description</h2>\n      <p><a href=\"https://atcoder-replay.kakira.dev/\" target=\"_blank\" rel=\"noreferrer\">AtCoder Replay (β)</a>\n      がマラソンに対応していなかったので作りました．</p>\n\n      <h2>Let's Replay!</h2>\n      <FormBlock paramUsers={paramUser} paramContest={paramContest} contests={contests} />\n\n      <RankLineChart\n        users={users}\n        contest={contestMap.get(paramContest)}\n        contestSubmissions={contestSubmissions}\n        showDots={showDots}\n        showACLabels={showACLabels} />\n\n      <h2>Display Options</h2>\n      <p>\n        <Row>\n          <Col sm={12}>\n            <FormGroup style={{ width: '100%' }} check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  checked={showDots}\n                  onChange={(e) => setShowDots(e.target.checked)}\n                />\n            Show Dots\n          </Label>\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={12}>\n            <FormGroup style={{ width: '100%' }} check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  checked={showACLabels}\n                  onChange={(e) => setShowACLabels(e.target.checked)}\n                />\n            Show AC Labels\n          </Label>\n            </FormGroup>\n          </Col>\n        </Row>\n      </p>\n\n      <h2>補足</h2>\n      <p>AHC001 は最終提出のプレテスト得点不明につき，各ユーザの最終提出のスコアは，システス結果 * 50 / 1000 を用いています．</p>\n      <p>日立北大2020 は最終提出のプレテスト得点不明につき，各ユーザの最終提出のスコアは，システス結果 * 16 / 200 を用いています．</p>\n    </>\n  )\n};\n\nexport const ChartPage = connect<InnerProps>((props) => {\n  return ({\n    contestsFetch: {\n      value: fetchContests(),\n    },\n    contestSubmissionsFetch: {\n      comparison: [props.match.params.contest],\n      value: fetchContestSubmissions(props.match.params.contest),\n    },\n  })\n})(InnerChartPage);\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom';\nimport { Container, Navbar, NavbarBrand } from 'reactstrap';\nimport { ChartPage } from \"./pages/chart\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar color=\"light\" light expand=\"lg\" fixed=\"top\">\n          <NavbarBrand tag={Link} to={'/'}>AtCoder Marathon Replay</NavbarBrand>\n        </Navbar>\n        <Container style={{ width: '100%', maxWidth: '90%', marginTop: '80px' }}>\n          <Switch>\n            <Route exact path=\"/chart/:contest/:user\" component={ChartPage} />\n            <Route exact path=\"/chart/\" component={ChartPage} />\n            <Redirect path=\"/\" to=\"/chart/\" />\n          </Switch>\n        </Container>\n        <footer className=\"footer\" style={{ marginTop: '30px', padding: '30px', backgroundColor: '#efefef' }}>\n          <div className=\"container\">連絡先: <a href=\"https://twitter.com/iiljj\">si (@iiljj) / Twitter</a></div></footer>\n      </Router>\n    </div >\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}