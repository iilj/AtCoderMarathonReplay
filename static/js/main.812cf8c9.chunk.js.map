{"version":3,"sources":["pages/chart/ChartBlock.tsx","utils/Data.ts","utils/index.ts","pages/chart/FormBlock.tsx","utils/BinaryIndexedTree.ts","utils/RankReproducer.ts","utils/Chart.ts","pages/chart/RankLineChartLabel.tsx","pages/chart/RankLineChartTooltip.tsx","pages/chart/RankLineChart.tsx","pages/chart/ScoreLineChartLabel.tsx","pages/chart/ScoreLineChart.tsx","pages/chart/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChartTab","CONTEST_SUBMISSION_MAP","Map","fetchContestSubmissions","contest","a","undefined","length","has","Promise","resolve","get","fetch","process","catch","e","Error","then","r","json","submissions","set","CONTESTS","fetchContests","dateToString","_date","format","year","getFullYear","toString","month","getMonth","slice","date","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","replace","getContestDropdownLabel","Date","start_time_unix","contest_name","FormBlock","props","paramUsers","paramContest","contests","useState","contest_slug","setContest","user","setUser","chartPagePath","useMemo","generatePath","history","useHistory","useEffect","unmounted","Row","Col","sm","FormGroup","style","width","Label","for","Input","type","name","id","value","onChange","target","map","_contest","placeholder","onKeyPress","key","push","Button","color","tag","NavLink","to","block","BinaryIndexedTree","_length","data","this","Array","fill","k","ret","x","l","sum","ContestUserState","taskScoreMap","score","afterTargetUser","contestSubmission","val","task","curVal","getRankSequence","contestSubmissions","some","user_name","userLength","scoreSet","Set","add","userSubmissionsMap","forEach","size","userSubmissions","contestUserState","addSubmission","scores","from","values","sort","b","compress","index","bit","curScore","curRank","seq","userStateMap","tmpUserState","oldScore","newScore","oldIndex","newIndex","query","time_unix","rank","status","overtakeUserName","overtakeUserOldScore","overtakeUserNewScore","getDatetimeTicks","contestDurationHours","end_time_unix","interval_sec","cur","getDatetimeTickFormatter","scoreTickFormatter","digitlen","toFixed","chartLineColors","getChartLineColor","RankLineChartLabel","y","rankChartDataSequence","text","i","j","ordinalSuffixOf","fillId","height","floodColor","in","operator","filter","fontSize","RankLineChartTooltip","active","payload","label","className","margin","padding","backgroundColor","border","whiteSpace","payloadContainer","curPayload","marginTop","marginBottom","stroke","display","paddingTop","paddingBottom","marginLeft","element","RankLineChart","sequences","showDots","showACLabels","ResponsiveContainer","LineChart","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","domain","tickFormatter","ticks","offset","position","YAxis","angle","reversed","Tooltip","content","Legend","entry","Line","dot","fillOpacity","strokeWidth","LabelList","ScoreLineChartLabel","ScoreLineChart","scoreUpdateSequences","rankChartData","ChartBlock","users","setShowDots","showScoreUpdateLabels","setShowScoreUpdateLabels","activeTab","setActiveTab","Alert","textAlign","every","invalidUser","invalidUsers","maxRankText","reduce","prev","rankChartdata","maxtime","maxrank","tweetTitle","join","ButtonGroup","onClick","check","inline","checked","TwitterShareButton","url","window","location","href","title","TwitterIcon","round","UncontrolledTooltip","placement","replaceAll","ChartPage","match","params","paramUser","useSWR","contestsError","error","contestSubmissionsSWRResponse","contestSubmissionsError","split","_user","trim","contestMap","prevMap","rel","App","revalidateOnFocus","Navbar","light","expand","fixed","NavbarBrand","Link","Container","maxWidth","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.812cf8c9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { TwitterIcon, TwitterShareButton } from 'react-share';\nimport {\n  Input,\n  Row,\n  FormGroup,\n  Label,\n  Col,\n  ButtonGroup,\n  Button,\n  UncontrolledTooltip,\n  Alert,\n} from 'reactstrap';\nimport Contest from '../../interfaces/Contest';\nimport Submission from '../../interfaces/Submission';\nimport { dateToString } from '../../utils';\nimport { getRankSequence, RankChartData } from '../../utils/RankReproducer';\nimport { RankLineChart } from './RankLineChart';\nimport { ScoreLineChart } from './ScoreLineChart';\n\nenum ChartTab {\n  'rank' = 0,\n  'score' = 1,\n}\n\ninterface Props {\n  users: string[];\n  contest?: Contest;\n  contestSubmissions: Submission[];\n}\n\nexport const ChartBlock: React.FC<Props> = (props) => {\n  const { users, contest, contestSubmissions } = props;\n\n  const [showDots, setShowDots] = useState<boolean>(true);\n  const [showScoreUpdateLabels, setShowScoreUpdateLabels] = useState<boolean>(\n    true\n  );\n  const [activeTab, setActiveTab] = useState<ChartTab>(ChartTab.rank);\n\n  if (!contest) {\n    return <div style={{ height: '50px' }}></div>;\n  }\n  if (users.length === 0) {\n    return (\n      <Alert\n        color=\"danger\"\n        style={{\n          marginTop: '50px',\n          marginBottom: '50px',\n        }}\n      >\n        UserName is empty or invalid.\n      </Alert>\n    );\n  }\n  if (contestSubmissions.length === 0) {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '500px',\n          textAlign: 'center',\n          marginTop: '100px',\n          marginBottom: '100px',\n        }}\n      >\n        Fetch data...\n      </div>\n    );\n  }\n\n  const sequences: [string, RankChartData[]][] = users.map((user) => [\n    user,\n    getRankSequence(user, contestSubmissions),\n  ]);\n  if (sequences.every((entry) => entry[1].length === 0)) {\n    return (\n      <>\n        {sequences\n          .map((entry) => entry[0])\n          .map((invalidUser: string) => {\n            return (\n              <Alert\n                key={invalidUser}\n                color=\"danger\"\n                style={{\n                  marginTop: '10px',\n                  marginBottom: '20px',\n                }}\n              >\n                {`UserName ${invalidUser} is not in the data.`}\n              </Alert>\n            );\n          })}\n      </>\n    );\n  }\n  const invalidUsers: string[] = sequences\n    .filter((entry) => entry[1].length === 0)\n    .map((entry) => entry[0]);\n\n  let maxRankText = '';\n  if (sequences.length === 1) {\n    const [maxtime, maxrank] = sequences[0][1].reduce(\n      (\n        prev: [number, number],\n        rankChartdata: RankChartData\n      ): [number, number] => {\n        if (rankChartdata.type !== 'update') return prev;\n        const prevRank = prev[1];\n        if (prevRank < rankChartdata.rank) return prev;\n        return [rankChartdata.time_unix, rankChartdata.rank];\n      },\n      [-1, contestSubmissions.length] as [number, number]\n    );\n    maxRankText = `\\n最大瞬間風速は ${maxrank} 位 (${dateToString(\n      new Date(maxtime * 1000),\n      'MM/DD hh:mm'\n    )}) だよ！`;\n  }\n  const tweetTitle = `${users.join(',')}'s replay of ${contest.contest_name}\n  ${maxRankText}\n  AtCoder Marathon Replay`;\n\n  return (\n    <>\n      {invalidUsers.length > 0 &&\n        invalidUsers.map((invalidUser: string) => {\n          return (\n            <Alert\n              key={invalidUser}\n              color=\"danger\"\n              style={{\n                marginTop: '10px',\n                marginBottom: '20px',\n              }}\n            >\n              {`UserName ${invalidUser} is not in the data.`}\n            </Alert>\n          );\n        })}\n      <Row style={{ marginTop: '30px' }}>\n        <Col>\n          <ButtonGroup className=\"form-check-inline\">\n            <Button\n              color=\"secondary\"\n              onClick={() => {\n                setActiveTab(ChartTab.rank);\n              }}\n              active={activeTab === ChartTab.rank}\n            >\n              Rank\n            </Button>\n            <Button\n              color=\"secondary\"\n              onClick={() => {\n                setActiveTab(ChartTab.score);\n              }}\n              active={activeTab === ChartTab.score}\n            >\n              Score\n            </Button>\n          </ButtonGroup>\n          <FormGroup check inline>\n            <Label check>\n              <Input\n                type=\"checkbox\"\n                checked={showDots}\n                onChange={(e) => setShowDots(e.target.checked)}\n              />\n              Show Dots\n            </Label>\n          </FormGroup>\n          <FormGroup check inline>\n            <Label check>\n              <Input\n                type=\"checkbox\"\n                checked={showScoreUpdateLabels}\n                onChange={(e) => setShowScoreUpdateLabels(e.target.checked)}\n              />\n              Show Score Update Labels\n            </Label>\n          </FormGroup>\n        </Col>\n      </Row>\n\n      <h4\n        style={{\n          textAlign: 'center',\n          marginTop: '30px',\n          marginBottom: '-30px',\n        }}\n      >\n        Replay of {contest.contest_name}\n      </h4>\n      {activeTab === ChartTab.rank && (\n        <RankLineChart\n          sequences={sequences}\n          contest={contest}\n          showDots={showDots}\n          showACLabels={showScoreUpdateLabels}\n        />\n      )}\n      {activeTab === ChartTab.score && (\n        <ScoreLineChart\n          sequences={sequences}\n          contest={contest}\n          showDots={showDots}\n          showACLabels={showScoreUpdateLabels}\n        />\n      )}\n\n      <div style={{ textAlign: 'center' }}>\n        <TwitterShareButton\n          url={window.location.href}\n          title={tweetTitle}\n          id=\"UncontrolledTooltipExample\"\n        >\n          <TwitterIcon size={40} round />\n        </TwitterShareButton>\n        <UncontrolledTooltip\n          placement=\"top\"\n          target=\"UncontrolledTooltipExample\"\n        >\n          {(tweetTitle + ' ' + window.location.href).replaceAll('\\n', ' ')}\n        </UncontrolledTooltip>\n      </div>\n    </>\n  );\n};\n","import Contest from '../interfaces/Contest';\nimport Submission from '../interfaces/Submission';\n\nconst CONTEST_SUBMISSION_MAP: Map<string, Submission[]> = new Map<\n  string,\n  Submission[]\n>();\nexport const fetchContestSubmissions = async (\n  contest?: string\n): Promise<Submission[]> =>\n  contest !== undefined && contest.length > 0\n    ? !CONTEST_SUBMISSION_MAP.has(contest)\n      ? fetch(`${process.env.PUBLIC_URL}/submissions/${contest}.json`)\n          .catch((e) => {\n            throw Error(e);\n          })\n          .then(async (r) => {\n            const submissions = (await r.json()) as Submission[];\n            CONTEST_SUBMISSION_MAP.set(contest, submissions);\n            return submissions;\n          })\n      : Promise.resolve(CONTEST_SUBMISSION_MAP.get(contest) as Submission[])\n    : Promise.resolve([]);\n\nlet CONTESTS: Contest[] | undefined = undefined;\nexport const fetchContests = async (): Promise<Contest[]> =>\n  CONTESTS === undefined\n    ? fetch(`${process.env.PUBLIC_URL}/contests/contests.json`)\n        .catch((e) => {\n          throw Error(e);\n        })\n        .then(async (r) => {\n          CONTESTS = (await r.json()) as Contest[];\n          return CONTESTS;\n        })\n    : Promise.resolve(CONTESTS);\n","export const dateToString = (\n  _date: Date,\n  format = 'YYYY-MM-DD hh:mm:ss'\n): string => {\n  const year = _date.getFullYear().toString();\n  const month = `0${1 + _date.getMonth()}`.slice(-2);\n  const date = `0${_date.getDate()}`.slice(-2);\n  const hours = `0${_date.getHours()}`.slice(-2);\n  const minutes = `0${_date.getMinutes()}`.slice(-2);\n  const seconds = `0${_date.getSeconds()}`.slice(-2);\n\n  return format\n    .replace(/YYYY/g, year)\n    .replace(/MM/g, month)\n    .replace(/DD/g, date)\n    .replace(/hh/g, hours)\n    .replace(/mm/g, minutes)\n    .replace(/ss/g, seconds);\n};\n\n/**\n * returns suffix string of order, e.g. \"st\" of \"1st\".\n *\n * @param {number} i number representing order\n * @returns suffix string of order\n */\nexport const ordinalSuffixOf = (i: number): 'st' | 'nd' | 'rd' | 'th' => {\n  const j = i % 10;\n  const k = i % 100;\n  if (j === 1 && k !== 11) {\n    return 'st';\n  }\n  if (j === 2 && k !== 12) {\n    return 'nd';\n  }\n  if (j === 3 && k !== 13) {\n    return 'rd';\n  }\n  return 'th';\n};\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { Button, Input, Row, FormGroup, Label, Col } from 'reactstrap';\nimport Contest from '../../interfaces/Contest';\nimport { dateToString } from '../../utils';\n\ninterface Props {\n  paramUsers: string;\n  paramContest: string;\n  contests: Contest[];\n}\n\nconst generatePath = (contest: string, user: string): string =>\n  `/chart/${contest}/${user}`;\nconst getContestDropdownLabel = (contest: Contest): string =>\n  `${dateToString(new Date(contest.start_time_unix * 1000), 'YYYY-MM-DD')} ${\n    contest.contest_name\n  }`;\n\nexport const FormBlock: React.FC<Props> = (props) => {\n  const { paramUsers, paramContest, contests } = props;\n  const [contest, setContest] = useState(\n    paramContest !== ''\n      ? paramContest\n      : contests.length > 0\n      ? contests[0].contest_slug\n      : ''\n  );\n  const [user, setUser] = useState(paramUsers);\n  const chartPagePath = useMemo(() => generatePath(contest, user), [\n    contest,\n    user,\n  ]);\n  const history = useHistory();\n\n  useEffect(() => {\n    let unmounted = false;\n    const setDefaultContestValue = () => {\n      if (!unmounted && contests.length > 0 && contest === '')\n        setContest(contests[0].contest_slug);\n    };\n    void setDefaultContestValue();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [contests]);\n\n  return (\n    <>\n      <Row>\n        <Col sm={12}>\n          <FormGroup style={{ width: '100%' }}>\n            <Label for=\"input-contest\">CONTEST:</Label>\n            <Input\n              type=\"select\"\n              name=\"input-contest\"\n              id=\"input-contest\"\n              value={contest}\n              onChange={(e): void => setContest(e.target.value)}\n            >\n              {contests.map((_contest: Contest) => {\n                return (\n                  <option\n                    value={_contest.contest_slug}\n                    key={_contest.contest_slug}\n                  >\n                    {getContestDropdownLabel(_contest)}\n                  </option>\n                );\n              })}\n            </Input>\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12}>\n          <FormGroup style={{ width: '100%' }}>\n            <Label for=\"input-user\">ATCODER ID (COMMA SEPARATED):</Label>\n            <Input\n              value={user}\n              type=\"text\"\n              name=\"input-user\"\n              id=\"input-user\"\n              placeholder={user ? user : 'user1,user2,...'}\n              onChange={(e): void => setUser(e.target.value)}\n              onKeyPress={(e): void => {\n                if (e.key === 'Enter') {\n                  history.push(chartPagePath);\n                }\n              }}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12}>\n          <Button color=\"primary\" tag={NavLink} to={chartPagePath} block>\n            Replay!\n          </Button>\n        </Col>\n      </Row>\n    </>\n  );\n};\n","export class BinaryIndexedTree {\n  data: number[];\n  length: number;\n  constructor(_length: number) {\n    this.length = _length;\n    this.data = (Array(++_length) as number[]).fill(0);\n  }\n  sum(k: number): number {\n    let ret = 0;\n    for (++k; k > 0; k -= k & -k) ret += this.data[k];\n    return ret;\n  }\n  add(k: number, x: number): void {\n    for (++k; k < this.data.length; k += k & -k) this.data[k] += x;\n  }\n  // query for [l, r)\n  query(l: number, r: number): number {\n    return this.sum(r - 1) - this.sum(l - 1);\n  }\n}\n","import Submission from '../interfaces/Submission';\nimport { BinaryIndexedTree } from './BinaryIndexedTree';\n\nclass ContestUserState {\n  taskScoreMap: Map<string, number>;\n  score: number;\n  afterTargetUser: boolean;\n  constructor() {\n    this.taskScoreMap = new Map<string, number>();\n    this.score = 0;\n    this.afterTargetUser = false;\n  }\n  addSubmission(contestSubmission: Submission): void {\n    const val = contestSubmission.score;\n    if (this.taskScoreMap.has(contestSubmission.task)) {\n      const curVal = this.taskScoreMap.get(contestSubmission.task) as number;\n      if (curVal > val) return;\n      this.score += val - curVal;\n    } else {\n      this.score += val;\n    }\n    this.taskScoreMap.set(contestSubmission.task, val);\n  }\n}\n\nexport interface RankChartData {\n  user: string;\n  time_unix: number;\n  rank: number;\n  score: number;\n  type: 'update' | 'overtook';\n  task: string;\n  status: string;\n  oldScore?: number;\n  overtakeUserName?: string;\n  overtakeUserOldScore?: number;\n  overtakeUserNewScore?: number;\n}\n\nexport const getRankSequence = (\n  user: string,\n  contestSubmissions: Submission[]\n): RankChartData[] => {\n  if (\n    !contestSubmissions.some(\n      (contestSubmission: Submission): boolean =>\n        contestSubmission.user_name === user\n    )\n  ) {\n    return [] as RankChartData[];\n  }\n  // assert ユーザがいる\n\n  // 一度目のシミュレート（各ユーザの得点計算のみ）\n  const scoreSet = new Set<number>();\n  scoreSet.add(0);\n  let userLength;\n  {\n    const userSubmissionsMap = new Map<string, Submission[]>();\n    contestSubmissions.forEach((contestSubmission: Submission): void => {\n      if (userSubmissionsMap.has(contestSubmission.user_name)) {\n        userSubmissionsMap\n          .get(contestSubmission.user_name)\n          ?.push(contestSubmission);\n      } else {\n        userSubmissionsMap.set(contestSubmission.user_name, [\n          contestSubmission,\n        ]);\n      }\n    });\n    userLength = userSubmissionsMap.size;\n\n    userSubmissionsMap.forEach((userSubmissions: Submission[]): void => {\n      const contestUserState = new ContestUserState();\n      userSubmissions.forEach((contestSubmission: Submission): void => {\n        contestUserState.addSubmission(contestSubmission);\n        scoreSet.add(contestUserState.score);\n      });\n    });\n  }\n\n  // 得点一覧を生成\n  const scores: number[] = Array.from(scoreSet.values());\n  void scores.sort((a, b) => a - b);\n\n  // 座圧用辞書を作成\n  const compress = new Map<number, number>();\n  scores.forEach((score: number, index: number): void => {\n    compress.set(score, index);\n  });\n\n  // 二度目のシミュレート（各段階における順位の計算）\n  const bit: BinaryIndexedTree = new BinaryIndexedTree(scores.length); // 各得点に何人いるか\n  bit.add(compress.get(0) as number, userLength); // 全員を 0 点として扱う\n  let curScore = 0;\n  let curRank = 1;\n  const seq: RankChartData[] = [];\n  {\n    const userStateMap = new Map<string, ContestUserState>();\n    contestSubmissions.forEach((contestSubmission: Submission): void => {\n      if (!userStateMap.has(contestSubmission.user_name)) {\n        const tmpUserState = new ContestUserState();\n        tmpUserState.afterTargetUser = true;\n        userStateMap.set(contestSubmission.user_name, tmpUserState);\n      }\n      const contestUserState = userStateMap.get(\n        contestSubmission.user_name\n      ) as ContestUserState;\n      const oldScore = contestUserState.score;\n      // const oldAfterTargetUser = contestUserState.afterTargetUser;\n      contestUserState.addSubmission(contestSubmission);\n      // contestUserState.afterTargetUser = false;\n      const newScore = contestUserState.score;\n      if (newScore !== oldScore) {\n        // スコア更新\n        const oldIndex = compress.get(oldScore) as number;\n        const newIndex = compress.get(newScore) as number;\n        bit.add(oldIndex, -1);\n        bit.add(newIndex, 1);\n        if (contestSubmission.user_name === user) {\n          // curScore 以上の得点を取っている人数が順位\n          curScore = newScore;\n          curRank = bit.query(newIndex, scores.length);\n          seq.push({\n            user: user,\n            type: 'update',\n            time_unix: contestSubmission.time_unix,\n            rank: curRank,\n            score: newScore,\n            oldScore: oldScore,\n            task: contestSubmission.task,\n            status: contestSubmission.status,\n          });\n        } else {\n          if (newScore < curScore) {\n            // 追い越さなかった\n            contestUserState.afterTargetUser = false;\n            return;\n          } else if (newScore === curScore) {\n            // 同点になったけど追い越さなかった\n            contestUserState.afterTargetUser = true;\n            return;\n          } else {\n            // 追い越したか，あるいは最初から高い順位にいるか\n            if (oldScore > curScore) {\n              // 最初から得点が高い\n              contestUserState.afterTargetUser = false;\n              return;\n            } else if (\n              oldScore === curScore &&\n              !contestUserState.afterTargetUser\n            ) {\n              // ターゲットユーザよりも先に今の得点を取っていた\n              return;\n            }\n            // assert 追い越した\n            // console.log(`${oldScore} -> (${curScore}) -> ${newScore}`);\n            seq.push({\n              user: user,\n              type: 'overtook',\n              time_unix: contestSubmission.time_unix,\n              rank: ++curRank,\n              score: curScore,\n              overtakeUserName: contestSubmission.user_name,\n              overtakeUserOldScore: oldScore,\n              overtakeUserNewScore: newScore,\n              task: contestSubmission.task,\n              status: contestSubmission.status,\n            });\n            contestUserState.afterTargetUser = false;\n          }\n        }\n      }\n    });\n  }\n  return seq;\n};\n","import { dateToString } from '.';\nimport Contest from '../interfaces/Contest';\n\nexport const getDatetimeTicks = (contest: Contest): number[] => {\n  const contestDurationHours =\n    (contest.end_time_unix - contest.start_time_unix) / 3600;\n  let interval_sec = 3600;\n  if (contestDurationHours <= 6) {\n    interval_sec = 1800; // 6 時間以内なら 0.5 時間ごとに\n  } else if (contestDurationHours <= 12) {\n    interval_sec = 3600; // 12 時間以内なら 1 時間ごとに\n  } else if (contestDurationHours <= 24) {\n    interval_sec = 3600 * 2; // 24 時間以内なら 2 時間ごとに\n  } else if (contestDurationHours <= 24 * 3) {\n    interval_sec = 3600 * 6; // 3 日以内なら 6 時間ごとに\n  } else {\n    interval_sec = 3600 * 24; // 1 日ごと\n  }\n  const ret: number[] = [contest.start_time_unix];\n  for (\n    let cur =\n      contest.start_time_unix -\n      ((contest.start_time_unix + 3600 * 9) % interval_sec) +\n      interval_sec;\n    cur < contest.end_time_unix;\n    cur += interval_sec\n  ) {\n    ret.push(cur);\n  }\n  ret.push(contest.end_time_unix);\n  return ret;\n};\n\nexport const getDatetimeTickFormatter = (\n  contest: Contest\n): ((time_unix: number) => string) => {\n  const contestDurationHours =\n    (contest.end_time_unix - contest.start_time_unix) / 3600;\n  let format = '';\n  if (contestDurationHours <= 12) {\n    format = 'hh:mm'; // 12 時間以内なら 1 時間ごとに\n  } else if (contestDurationHours <= 24) {\n    format = 'hh:mm'; // 24 時間以内なら 2 時間ごとに\n  } else if (contestDurationHours <= 24 * 3) {\n    format = 'MM/DD hh:mm'; // 3 日以内なら 6 時間ごとに\n  } else {\n    format = 'MM/DD'; // 1 日ごと\n  }\n  return (time_unix: number) =>\n    dateToString(new Date(time_unix * 1000), format);\n};\n\nexport const scoreTickFormatter = (score: number): string => {\n  let curScore = score;\n  let digitlen = 0;\n  while (curScore >= 10) {\n    curScore /= 10;\n    digitlen++;\n  }\n  return `${curScore.toFixed(1)}e${digitlen}`;\n};\n\nexport const chartLineColors = [\n  '#1F77B4',\n  '#FF7F0E',\n  '#2CA02C',\n  '#D62728',\n  '#9467BD',\n  '#8C564B',\n  '#E377C2',\n  '#7D7F7F',\n  '#BCBD22',\n  '#17BECF',\n];\nexport const getChartLineColor = (index: number): string =>\n  chartLineColors[index % chartLineColors.length];\n","import React from 'react';\nimport { ordinalSuffixOf } from '../../utils';\nimport { RankChartData } from '../../utils/RankReproducer';\n\ninterface Props {\n  index?: number;\n  offset?: number;\n  position?: string;\n  value?: number;\n  viewBox?: {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n  };\n  x?: number;\n  y?: number;\n  color: string;\n  rankChartDataSequence: RankChartData[];\n}\n\nexport const RankLineChartLabel: React.FC<Props> = (props) => {\n  const { index, x, y, color, rankChartDataSequence } = props;\n  if (index === undefined) return <></>;\n  if (x === undefined || y === undefined) return <></>;\n  const data: RankChartData = rankChartDataSequence[index];\n  if (data.type !== 'update') return <></>;\n  const fontSize = 14;\n  const offset = 10;\n  const text = `${data.rank}${ordinalSuffixOf(data.rank)}`;\n  const fillId = `solid-${data.user}-${index}`;\n  return (\n    <g>\n      <defs>\n        <filter x=\"-0.05\" y=\"-0.07\" width=\"1.1\" height=\"1.1\" id={fillId}>\n          <feFlood floodColor={color} />\n          <feComposite in=\"SourceGraphic\" operator=\"xor\" />\n        </filter>\n      </defs>\n      <text\n        filter={`url(#${fillId})`}\n        x={x}\n        y={y - offset}\n        fontSize={fontSize}\n        fill=\"none\"\n      >\n        {text}\n      </text>\n      <text x={x} y={y - offset} fontSize={fontSize} fill=\"white\">\n        {text}\n      </text>\n    </g>\n  );\n};\n","import React from 'react';\nimport { dateToString } from '../../utils';\nimport { RankChartData } from '../../utils/RankReproducer';\n\ninterface RankLineChartTooltipPayloadContainer {\n  color: string;\n  dataKey: string; // rank\n  fill: string;\n  name: string; // atcoder user name\n  stroke: string;\n  strokeWidth: number;\n  value: number;\n  payload: RankChartData;\n}\n\ninterface Props {\n  active?: boolean;\n  payload?: RankLineChartTooltipPayloadContainer[];\n  label?: number;\n}\n\nexport const RankLineChartTooltip: React.FC<Props> = (props) => {\n  const { active, payload, label } = props;\n  if (!active || payload === undefined || label === undefined) return <></>;\n  return (\n    <div\n      className=\"recharts-default-tooltip\"\n      style={{\n        margin: '0px',\n        padding: '10px',\n        backgroundColor: 'rgb(255, 255, 255)',\n        border: '1px solid rgb(204, 204, 204)',\n        whiteSpace: 'nowrap',\n      }}\n    >\n      <p className=\"recharts-tooltip-label\" style={{ margin: '0px' }}>\n        {dateToString(new Date(label * 1000))}\n      </p>\n      {payload\n        .map((payloadContainer: RankLineChartTooltipPayloadContainer) => {\n          const curPayload: RankChartData = payloadContainer.payload;\n          if (\n            payloadContainer.name !== curPayload.user ||\n            label !== curPayload.time_unix\n          ) {\n            return undefined;\n          }\n          return (\n            <div key={payloadContainer.name}>\n              <hr style={{ marginTop: '0.3em', marginBottom: '0.3em' }} />\n              <div\n                style={{ color: payloadContainer.stroke }}\n              >{`User: ${payloadContainer.name}`}</div>\n              <ul\n                className=\"recharts-tooltip-item-list\"\n                style={{ padding: '0px', margin: '0px' }}\n              >\n                <li\n                  className=\"recharts-tooltip-item\"\n                  style={{\n                    display: 'block',\n                    paddingTop: '4px',\n                    paddingBottom: '4px',\n                    color: 'rgb(136, 132, 216)',\n                  }}\n                >\n                  <span className=\"recharts-tooltip-item-name\">Rank</span>\n                  <span className=\"recharts-tooltip-item-separator\"> : </span>\n                  <span className=\"recharts-tooltip-item-value\">\n                    {curPayload.rank}\n                  </span>\n                  <span className=\"recharts-tooltip-item-unit\" />\n                </li>\n              </ul>\n              <div style={{ fontSize: 10 }}>\n                {curPayload.type === 'update' ? (\n                  <>\n                    <div>得点を更新しました:</div>\n                    <div>\n                      <span style={{ color: payloadContainer.stroke }}>\n                        {curPayload.oldScore}\n                      </span>\n                      {' → '}\n                      <span style={{ color: payloadContainer.stroke }}>\n                        {curPayload.score}\n                      </span>\n                    </div>\n                    <div>{`(${curPayload.task} ${curPayload.status})`}</div>\n                  </>\n                ) : (\n                  <>\n                    <div>{`${\n                      curPayload.overtakeUserName ?? ''\n                    } さんに追い抜かれました:`}</div>\n                    <div>\n                      {`${payloadContainer.name}: `}\n                      <span style={{ color: payloadContainer.stroke }}>\n                        {curPayload.score}\n                      </span>\n                    </div>\n                    <div>{`${curPayload.overtakeUserName ?? ''}: ${\n                      curPayload.overtakeUserOldScore ?? ''\n                    } → ${curPayload.overtakeUserNewScore ?? ''}`}</div>\n                    <div\n                      style={{ marginLeft: '1em' }}\n                    >{`(${curPayload.task} ${curPayload.status})`}</div>\n                  </>\n                )}\n              </div>\n            </div>\n          );\n        })\n        .filter((element) => element !== undefined)}\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Label,\n  LabelList,\n} from 'recharts';\nimport Contest from '../../interfaces/Contest';\nimport {\n  getChartLineColor,\n  getDatetimeTickFormatter,\n  getDatetimeTicks,\n} from '../../utils/Chart';\nimport { RankChartData } from '../../utils/RankReproducer';\nimport { RankLineChartLabel } from './RankLineChartLabel';\nimport { RankLineChartTooltip } from './RankLineChartTooltip';\n\ninterface Props {\n  sequences: [string, RankChartData[]][];\n  contest: Contest;\n  showDots: boolean;\n  showACLabels: boolean;\n}\n\nexport const RankLineChart: React.FC<Props> = (props) => {\n  const { sequences, contest, showDots, showACLabels } = props;\n\n  return (\n    <div style={{ width: '100%', height: '500px', marginTop: '50px' }}>\n      <ResponsiveContainer>\n        <LineChart\n          width={1000}\n          height={500}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            type=\"number\"\n            dataKey=\"time_unix\"\n            name=\"unixtime\"\n            domain={[contest.start_time_unix, contest.end_time_unix]}\n            tickFormatter={getDatetimeTickFormatter(contest)}\n            ticks={getDatetimeTicks(contest)}\n          >\n            <Label value=\"Datetime\" offset={0} position=\"insideBottom\" />\n          </XAxis>\n          <YAxis\n            type=\"number\"\n            name=\"rank\"\n            label={{ value: 'Rank', angle: -90, position: 'insideLeft' }}\n            reversed\n          />\n          <Tooltip content={<RankLineChartTooltip />} />\n          <Legend />\n          {sequences.map((entry: [string, RankChartData[]], index: number) => {\n            const [user, seq] = entry;\n            const color = getChartLineColor(index);\n            return (\n              <Line\n                key={user}\n                data={seq}\n                name={user}\n                dataKey=\"rank\"\n                type=\"stepAfter\"\n                stroke={color}\n                dot={showDots && { fillOpacity: 0.2, strokeWidth: 1 }}\n              >\n                {showACLabels && (\n                  <LabelList\n                    dataKey=\"label\"\n                    position=\"top\"\n                    content={\n                      <RankLineChartLabel\n                        color={color}\n                        rankChartDataSequence={seq}\n                      />\n                    }\n                  />\n                )}\n              </Line>\n            );\n          })}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n","import React from 'react';\nimport { RankChartData } from '../../utils/RankReproducer';\n\ninterface Props {\n  index?: number;\n  offset?: number;\n  position?: string;\n  value?: number;\n  viewBox?: {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n  };\n  x?: number;\n  y?: number;\n  color: string;\n  rankChartDataSequence: RankChartData[];\n}\n\nexport const ScoreLineChartLabel: React.FC<Props> = (props) => {\n  const { index, x, y, color, rankChartDataSequence } = props;\n  if (index === undefined) return <></>;\n  if (x === undefined || y === undefined) return <></>;\n  const data: RankChartData = rankChartDataSequence[index];\n  if (data.type !== 'update') return <></>;\n  const fontSize = 14;\n  const offset = 10;\n  const text = `${data.score}`;\n  const fillId = `solid-score-${data.user}-${index}`;\n  return (\n    <g>\n      <defs>\n        <filter x=\"-0.05\" y=\"-0.07\" width=\"1.1\" height=\"1.1\" id={fillId}>\n          <feFlood floodColor={color} />\n          <feComposite in=\"SourceGraphic\" operator=\"xor\" />\n        </filter>\n      </defs>\n      <text\n        filter={`url(#${fillId})`}\n        x={x}\n        y={y - offset}\n        fontSize={fontSize}\n        fill=\"none\"\n      >\n        {text}\n      </text>\n      <text x={x} y={y - offset} fontSize={fontSize} fill=\"white\">\n        {text}\n      </text>\n    </g>\n  );\n};\n","import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Label,\n  LabelList,\n} from 'recharts';\nimport Contest from '../../interfaces/Contest';\nimport {\n  getChartLineColor,\n  getDatetimeTickFormatter,\n  getDatetimeTicks,\n  scoreTickFormatter,\n} from '../../utils/Chart';\nimport { RankChartData } from '../../utils/RankReproducer';\nimport { RankLineChartTooltip } from './RankLineChartTooltip';\nimport { ScoreLineChartLabel } from './ScoreLineChartLabel';\n\ninterface Props {\n  sequences: [string, RankChartData[]][];\n  contest: Contest;\n  showDots: boolean;\n  showACLabels: boolean;\n}\n\nexport const ScoreLineChart: React.FC<Props> = (props) => {\n  const { sequences, contest, showDots, showACLabels } = props;\n\n  const scoreUpdateSequences: [\n    string,\n    RankChartData[]\n  ][] = sequences.map(([user, rankChartDataSequence]): [\n    string,\n    RankChartData[]\n  ] => [\n    user,\n    rankChartDataSequence.filter(\n      (rankChartData) => rankChartData.type === 'update'\n    ),\n  ]);\n\n  return (\n    <div style={{ width: '100%', height: '500px', marginTop: '50px' }}>\n      <ResponsiveContainer>\n        <LineChart\n          width={1000}\n          height={500}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            type=\"number\"\n            dataKey=\"time_unix\"\n            name=\"unixtime\"\n            domain={[contest.start_time_unix, contest.end_time_unix]}\n            tickFormatter={getDatetimeTickFormatter(contest)}\n            ticks={getDatetimeTicks(contest)}\n          >\n            <Label value=\"Datetime\" offset={0} position=\"insideBottom\" />\n          </XAxis>\n          <YAxis\n            type=\"number\"\n            name=\"score\"\n            label={{ value: 'Score', angle: -90, position: 'insideLeft' }}\n            tickFormatter={scoreTickFormatter}\n          />\n          <Tooltip content={<RankLineChartTooltip />} />\n          <Legend />\n          {scoreUpdateSequences.map(\n            (entry: [string, RankChartData[]], index: number) => {\n              const [user, seq] = entry;\n              const color = getChartLineColor(index);\n              return (\n                <Line\n                  key={user}\n                  data={seq}\n                  name={user}\n                  dataKey=\"score\"\n                  type=\"stepAfter\"\n                  stroke={color}\n                  dot={showDots && { fillOpacity: 0.2, strokeWidth: 1 }}\n                >\n                  {showACLabels && (\n                    <LabelList\n                      dataKey=\"label\"\n                      position=\"top\"\n                      content={\n                        <ScoreLineChartLabel\n                          color={color}\n                          rankChartDataSequence={seq}\n                        />\n                      }\n                    />\n                  )}\n                </Line>\n              );\n            }\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n","import React from 'react';\nimport { fetchContests, fetchContestSubmissions } from '../../utils/Data';\nimport Contest from '../../interfaces/Contest';\nimport Submission from '../../interfaces/Submission';\nimport { FormBlock } from './FormBlock';\nimport { ChartBlock } from './ChartBlock';\nimport useSWR from 'swr';\nimport { Alert } from 'reactstrap';\n\ninterface Props {\n  match: {\n    params: {\n      contest: string;\n      user: string;\n    };\n  };\n}\n\nexport const ChartPage: React.FC<Props> = (props) => {\n  const paramContest: string = props.match.params.contest ?? '';\n  const paramUser: string = props.match.params.user ?? '';\n\n  const { data: contests, error: contestsError } = useSWR<Contest[], Error>(\n    '/contests/contests',\n    fetchContests\n  );\n\n  const contestSubmissionsSWRResponse = useSWR<Submission[], Error>(\n    paramUser.length > 0 && paramContest.length > 0\n      ? `/submissions/${paramContest}`\n      : null,\n    () => {\n      return fetchContestSubmissions(paramContest);\n    }\n  );\n  const contestSubmissions: Submission[] | undefined =\n    contestSubmissionsSWRResponse.data;\n  const contestSubmissionsError: Error | undefined =\n    contestSubmissionsSWRResponse.error;\n\n  const users = paramUser\n    .split(',')\n    .map((_user) => _user.trim())\n    .filter((_user) => _user !== '');\n\n  const contestMap = contests?.reduce(\n    (prevMap: Map<string, Contest>, contest: Contest): Map<string, Contest> =>\n      prevMap.set(contest.contest_slug, contest),\n    new Map<string, Contest>()\n  );\n  return (\n    <>\n      <h2>Description</h2>\n      <p>\n        AtCoder\n        で行われたマラソンコンテストにおける順位および得点の推移をグラフに表示します．\n      </p>\n      <p>\n        <a\n          href=\"https://atcoder-replay.kakira.dev/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          AtCoder Replay (β)\n        </a>{' '}\n        がマラソンに対応していなかったので作りました．\n      </p>\n\n      <h2>Let&apos;s Replay!</h2>\n      {contestsError ? (\n        <Alert\n          color=\"danger\"\n          style={{\n            marginTop: '50px',\n            marginBottom: '50px',\n          }}\n        >\n          Failed to fetch contest list.\n        </Alert>\n      ) : contests === undefined ? (\n        <div\n          style={{\n            width: '100%',\n            height: '500px',\n            textAlign: 'center',\n            marginTop: '100px',\n            marginBottom: '100px',\n          }}\n        >\n          Fetch contest data...\n        </div>\n      ) : (\n        <FormBlock\n          paramUsers={paramUser}\n          paramContest={paramContest}\n          contests={contests}\n        />\n      )}\n\n      {paramUser.length === 0 ? (\n        <div style={{ height: '50px' }}></div>\n      ) : contestSubmissionsError ? (\n        <Alert\n          color=\"danger\"\n          style={{\n            marginTop: '50px',\n            marginBottom: '50px',\n          }}\n        >\n          Failed to fetch contest submission list.\n        </Alert>\n      ) : contestSubmissions === undefined ? (\n        <div\n          style={{\n            width: '100%',\n            height: '500px',\n            textAlign: 'center',\n            marginTop: '100px',\n            marginBottom: '100px',\n          }}\n        >\n          Fetch contest submissions data...\n        </div>\n      ) : (\n        <ChartBlock\n          users={users}\n          contest={contestMap?.get(paramContest)}\n          contestSubmissions={contestSubmissions}\n        />\n      )}\n\n      <h2>補足</h2>\n      <p>\n        AHC001\n        は最終提出のプレテスト得点不明につき，各ユーザの最終提出のスコアは，システス結果\n        * 50 / 1000 を用いています．\n      </p>\n      <p>\n        日立北大2020\n        は最終提出のプレテスト得点不明につき，各ユーザの最終提出のスコアは，システス結果\n        * 16 / 200 を用いています．\n      </p>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link,\n} from 'react-router-dom';\nimport { Container, Navbar, NavbarBrand } from 'reactstrap';\nimport { SWRConfig } from 'swr';\nimport { ChartPage } from './pages/chart';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <SWRConfig value={{ revalidateOnFocus: false }}>\n        <Router>\n          <Navbar color=\"light\" light expand=\"lg\" fixed=\"top\">\n            <NavbarBrand tag={Link} to={'/'}>\n              AtCoder Marathon Replay\n            </NavbarBrand>\n          </Navbar>\n          <Container\n            style={{ width: '100%', maxWidth: '90%', marginTop: '80px' }}\n          >\n            <Switch>\n              <Route\n                exact\n                path=\"/chart/:contest/:user\"\n                component={ChartPage as React.FC}\n              />\n              <Route\n                exact\n                path=\"/chart/:contest/\"\n                component={ChartPage as React.FC}\n              />\n              <Route exact path=\"/chart/\" component={ChartPage as React.FC} />\n              <Redirect path=\"/\" to=\"/chart/\" />\n            </Switch>\n          </Container>\n          <footer\n            className=\"footer\"\n            style={{\n              marginTop: '30px',\n              padding: '30px',\n              backgroundColor: '#efefef',\n            }}\n          >\n            <div className=\"container\">\n              連絡先:{' '}\n              <a href=\"https://twitter.com/iiljj\">si (@iiljj) / Twitter</a>\n              {', '}\n              <a href=\"https://github.com/iilj\">iilj (iilj) / GitHub</a>\n            </div>\n          </footer>\n        </Router>\n      </SWRConfig>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import('web-vitals').then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      }\n    );\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}