{"version":3,"sources":["pages/chart/ChartBlock.tsx","components/NavigationBar.tsx","components/Supplement.tsx","pages/chart/FormBlock.tsx","utils/BinaryIndexedTree.ts","utils/RankReproducer.ts","utils/index.ts","utils/Chart.ts","pages/chart/LineChartLabel.tsx","pages/chart/LineChartTooltip.tsx","pages/chart/RankLineChart.tsx","pages/chart/ScoreLineChart.tsx","utils/Data.ts","pages/chart/index.tsx","pages/standings/FormBlock.tsx","components/PaginationPanel.tsx","pages/standings/StandingsTable.tsx","pages/standings/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChartTab","NavigationBar","useState","isOpen","setIsOpen","Navbar","color","light","expand","fixed","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","style","marginRight","icon","faChartLine","faSortAmountDown","Supplement","href","getContestDropdownLabel","contest","dataFormat","Date","start_time_unix","contest_name","FormBlock","props","paramUsers","paramContest","contests","length","contest_slug","setContest","user","setUser","chartPagePath","useMemo","generatePath","history","useHistory","useEffect","unmounted","Row","Col","sm","FormGroup","width","Label","for","Input","type","name","id","value","onChange","e","target","map","_contest","placeholder","onKeyPress","key","push","Button","block","BinaryIndexedTree","_length","data","this","Array","fill","k","ret","x","l","r","sum","ContestUserState","taskScoreMap","score","afterTargetUser","Map","contestSubmission","val","has","task","curVal","get","set","getRankSequence","contestSubmissions","some","user_name","userLength","scoreSet","Set","add","userSubmissionsMap","forEach","size","userSubmissions","contestUserState","addSubmission","scores","from","values","sort","a","b","compress","index","bit","curScore","curRank","seq","userStateMap","tmpUserState","oldScore","newScore","oldIndex","newIndex","query","time_unix","rank","status","overtakeUserName","overtakeUserOldScore","overtakeUserNewScore","formatScore","String","replace","formatElapsedSec","elapsedSec","sign","days","Math","floor","hours","minutes","seconds","pad","num","slice","getDatetimeTicks","contestDurationHours","end_time_unix","interval_sec","offsetMinutes","getTimezoneOffset","cur","getDatetimeTickFormatter","format","scoreTickFormatter","digitlen","toFixed","chartLineColors","getChartLineColor","LineChartLabel","y","rankChartDataSequence","getText","chartId","undefined","text","colorFillId","height","floodColor","floodOpacity","operator","in","filter","fontSize","LineChartTooltip","active","payload","label","margin","padding","backgroundColor","border","whiteSpace","payloadContainer","curPayload","marginTop","marginBottom","stroke","display","paddingTop","paddingBottom","marginLeft","element","RankLineChart","sequences","showDots","showACLabels","ResponsiveContainer","LineChart","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","domain","tickFormatter","ticks","offset","position","YAxis","angle","reversed","Tooltip","content","Legend","entry","Line","dot","fillOpacity","strokeWidth","LabelList","i","j","ordinalSuffixOf","ScoreLineChart","scoreUpdateSequences","rankChartData","ChartBlock","users","setShowDots","showScoreUpdateLabels","setShowScoreUpdateLabels","activeTab","setActiveTab","Alert","textAlign","every","invalidUser","invalidUsers","maxRankText","reduce","prev","rankChartdata","maxtime","maxrank","tweetTitle","join","ButtonGroup","check","inline","checked","TwitterShareButton","url","window","location","title","TwitterIcon","round","UncontrolledTooltip","placement","replaceAll","CONTEST_SUBMISSION_MAP","fetchContestSubmissions","Promise","resolve","fetch","process","catch","Error","then","json","submissions","CONTEST_TASK_MAP","fetchContestTasks","tasks","CONTESTS","fetchContests","ChartPage","match","params","paramUser","useSWR","contestsError","error","contestSubmissionsError","split","_user","trim","contestMap","prevMap","rel","parsedDatetime","cursorDate","setCursorDate","standingsPagePath","lb","ub","showTimeSelect","dateFormat","timeFormat","selected","date","customInput","minDate","maxDate","filterTime","getTime","pageList","currPage","pageStartIndex","totalPages","start","end","v","pageNumbers","tmpExp","tmpPageNumber","unshift","PaginationPanel","renderSizePerPage","totalSize","sizePerPage","sizePerPageList","onSizePerPageChange","page","onPageChange","ceil","p","Pagination","flexWrap","justifyContent","pageNumber","PaginationItem","PaginationLink","compareUserStandingsTaskEntry","score_time","submit_count","_sortCaret","order","faSortUp","faSortDown","faSort","StandingsTable","contestTasks","userStandingsEntriesMap","userStandingsEntry","submit_count_ce","curTask","task_slug","targetTaskEntry","userStandingsEntries","columns","dataField","classes","headerClasses","sortFunc","sortCaret","textFilter","formatter","cell","_row","_rowIndex","btnId","faSearch","formatExtraData","row","_a","_b","_dataField","rowA","rowB","isDummyField","_cell","userTaskEntry","headerFormatter","column","_colIndex","components","sortElement","entryA","entryB","pagination","paginationFactory","custom","paginationProps","paginationTableProps","keyField","bootstrap4","striped","filterFactory","wrapperClasses","datetimeRegExp","StandingsPage","paramDatetime","exec","parseParamDatetime","datetime","contestTasksError","App","revalidateOnFocus","Container","maxWidth","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.600249cc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { TwitterIcon, TwitterShareButton } from 'react-share';\nimport {\n  Input,\n  Row,\n  FormGroup,\n  Label,\n  Col,\n  ButtonGroup,\n  Button,\n  UncontrolledTooltip,\n  Alert,\n} from 'reactstrap';\nimport dataFormat from 'dateformat';\nimport Contest from '../../interfaces/Contest';\nimport Submission from '../../interfaces/Submission';\nimport { getRankSequence, RankChartData } from '../../utils/RankReproducer';\nimport { RankLineChart } from './RankLineChart';\nimport { ScoreLineChart } from './ScoreLineChart';\n\nenum ChartTab {\n  'rank' = 0,\n  'score' = 1,\n}\n\ninterface Props {\n  users: string[];\n  contest?: Contest;\n  contestSubmissions: Submission[];\n}\n\nexport const ChartBlock: React.FC<Props> = (props) => {\n  const { users, contest, contestSubmissions } = props;\n\n  const [showDots, setShowDots] = useState<boolean>(true);\n  const [showScoreUpdateLabels, setShowScoreUpdateLabels] = useState<boolean>(\n    true\n  );\n  const [activeTab, setActiveTab] = useState<ChartTab>(ChartTab.rank);\n\n  if (!contest) {\n    return <div style={{ height: '50px' }}></div>;\n  }\n  if (users.length === 0) {\n    return (\n      <Alert\n        color=\"danger\"\n        style={{\n          marginTop: '50px',\n          marginBottom: '50px',\n        }}\n      >\n        UserName is empty or invalid.\n      </Alert>\n    );\n  }\n  if (contestSubmissions.length === 0) {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '500px',\n          textAlign: 'center',\n          marginTop: '100px',\n          marginBottom: '100px',\n        }}\n      >\n        Fetch data...\n      </div>\n    );\n  }\n\n  const sequences: [string, RankChartData[]][] = users.map((user) => [\n    user,\n    getRankSequence(user, contestSubmissions),\n  ]);\n  if (sequences.every((entry) => entry[1].length === 0)) {\n    return (\n      <>\n        {sequences\n          .map((entry) => entry[0])\n          .map((invalidUser: string) => {\n            return (\n              <Alert\n                key={invalidUser}\n                color=\"danger\"\n                style={{\n                  marginTop: '10px',\n                  marginBottom: '20px',\n                }}\n              >\n                {`UserName ${invalidUser} is not in the data.`}\n              </Alert>\n            );\n          })}\n      </>\n    );\n  }\n  const invalidUsers: string[] = sequences\n    .filter((entry) => entry[1].length === 0)\n    .map((entry) => entry[0]);\n\n  let maxRankText = '';\n  if (sequences.length === 1) {\n    const [maxtime, maxrank] = sequences[0][1].reduce(\n      (\n        prev: [number, number],\n        rankChartdata: RankChartData\n      ): [number, number] => {\n        if (rankChartdata.type !== 'update') return prev;\n        const prevRank = prev[1];\n        if (prevRank < rankChartdata.rank) return prev;\n        return [rankChartdata.time_unix, rankChartdata.rank];\n      },\n      [-1, contestSubmissions.length] as [number, number]\n    );\n    maxRankText = `\\n最大瞬間風速は ${maxrank} 位 (${dataFormat(\n      new Date(maxtime * 1000),\n      'mm/dd HH:MM'\n    )}) だよ！`;\n  }\n  const tweetTitle =\n    `${users.join(',')}'s replay of ${contest.contest_name}\\n` +\n    `${maxRankText}\\n` +\n    `AtCoder Marathon Replay`;\n\n  return (\n    <>\n      {invalidUsers.length > 0 &&\n        invalidUsers.map((invalidUser: string) => {\n          return (\n            <Alert\n              key={invalidUser}\n              color=\"danger\"\n              style={{\n                marginTop: '10px',\n                marginBottom: '20px',\n              }}\n            >\n              {`UserName ${invalidUser} is not in the data.`}\n            </Alert>\n          );\n        })}\n      <Row style={{ marginTop: '30px' }}>\n        <Col>\n          <ButtonGroup className=\"form-check-inline\">\n            <Button\n              color=\"secondary\"\n              onClick={() => {\n                setActiveTab(ChartTab.rank);\n              }}\n              active={activeTab === ChartTab.rank}\n            >\n              Rank\n            </Button>\n            <Button\n              color=\"secondary\"\n              onClick={() => {\n                setActiveTab(ChartTab.score);\n              }}\n              active={activeTab === ChartTab.score}\n            >\n              Score\n            </Button>\n          </ButtonGroup>\n          <FormGroup check inline>\n            <Label check>\n              <Input\n                type=\"checkbox\"\n                checked={showDots}\n                onChange={(e) => setShowDots(e.target.checked)}\n              />\n              Show Dots\n            </Label>\n          </FormGroup>\n          <FormGroup check inline>\n            <Label check>\n              <Input\n                type=\"checkbox\"\n                checked={showScoreUpdateLabels}\n                onChange={(e) => setShowScoreUpdateLabels(e.target.checked)}\n              />\n              Show Score Update Labels\n            </Label>\n          </FormGroup>\n        </Col>\n      </Row>\n\n      <h4\n        style={{\n          textAlign: 'center',\n          marginTop: '30px',\n          marginBottom: '-30px',\n        }}\n      >\n        Replay of {contest.contest_name}\n      </h4>\n      {activeTab === ChartTab.rank && (\n        <RankLineChart\n          sequences={sequences}\n          contest={contest}\n          showDots={showDots}\n          showACLabels={showScoreUpdateLabels}\n        />\n      )}\n      {activeTab === ChartTab.score && (\n        <ScoreLineChart\n          sequences={sequences}\n          contest={contest}\n          showDots={showDots}\n          showACLabels={showScoreUpdateLabels}\n        />\n      )}\n\n      <div style={{ textAlign: 'center' }}>\n        <TwitterShareButton\n          url={window.location.href}\n          title={tweetTitle}\n          id=\"chart-share-button\"\n        >\n          <TwitterIcon size={40} round />\n        </TwitterShareButton>\n        <UncontrolledTooltip placement=\"top\" target=\"chart-share-button\">\n          {(tweetTitle + ' ' + window.location.href).replaceAll('\\n', ' ')}\n        </UncontrolledTooltip>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Collapse,\n  Nav,\n  Navbar,\n  NavLink,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n} from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChartLine,\n  faSortAmountDown,\n} from '@fortawesome/free-solid-svg-icons';\n\nexport const NavigationBar: React.FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <Navbar color=\"light\" light expand=\"md\" fixed=\"top\">\n      <NavbarBrand tag={Link} to={'/'}>\n        AtCoder Marathon Replay\n      </NavbarBrand>\n      <NavbarToggler onClick={toggle} />\n      <Collapse isOpen={isOpen} navbar>\n        <Nav className=\"mr-auto\" navbar>\n          <NavItem>\n            <NavLink tag={Link} to=\"/chart/\">\n              <FontAwesomeIcon\n                style={{ marginRight: '4px' }}\n                icon={faChartLine}\n              />\n              Chart\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink tag={Link} to=\"/standings/\">\n              <FontAwesomeIcon\n                style={{ marginRight: '4px' }}\n                icon={faSortAmountDown}\n              />\n              Standings\n            </NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navbar>\n  );\n};\n","import React from 'react';\n\nexport const Supplement: React.FC = () => (\n  <>\n    <h2>補足</h2>\n    <p>\n      以下のコンテストの問題に対する各ユーザの最終提出は，プレテスト得点が不明であるため，システムテストの得点に下記の倍率を掛けた値を用いています．\n    </p>\n    <ul>\n      <li>\n        <del>ahc001: 50 / 1000</del> →{' '}\n        <a href=\"https://www.dropbox.com/s/rqrlprp0zoyi4di/result_ahc001.csv?dl=0\">\n          result_ahc001.csv\n        </a>{' '}\n        から Provisional Score を取り込みました．\n      </li>\n      <li>hokudai-hitachi2020: 16 / 200</li>\n      <li>hokudai-hitachi2019-2: 30 / 100</li>\n      <li>hokudai-hitachi2019-1: 30 / 100</li>\n      <li>hokudai-hitachi2018: 15 / 100</li>\n      <li>hokudai-hitachi2017-2: 30 / 150</li>\n      <li>hokudai-hitachi2017-1: 30 / 150</li>\n    </ul>\n  </>\n);\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { Button, Input, Row, FormGroup, Label, Col } from 'reactstrap';\nimport dataFormat from 'dateformat';\nimport Contest from '../../interfaces/Contest';\n\ninterface Props {\n  paramUsers: string;\n  paramContest: string;\n  contests: Contest[];\n}\n\nconst generatePath = (contest: string, user: string): string =>\n  `/chart/${contest}/${user}`;\nconst getContestDropdownLabel = (contest: Contest): string =>\n  `${dataFormat(new Date(contest.start_time_unix * 1000), 'yyyy-mm-dd')} ${\n    contest.contest_name\n  }`;\n\nexport const FormBlock: React.FC<Props> = (props) => {\n  const { paramUsers, paramContest, contests } = props;\n  const [contest, setContest] = useState(\n    paramContest !== ''\n      ? paramContest\n      : contests.length > 0\n      ? contests[0].contest_slug\n      : ''\n  );\n  const [user, setUser] = useState(paramUsers);\n  const chartPagePath = useMemo(() => generatePath(contest, user), [\n    contest,\n    user,\n  ]);\n  const history = useHistory();\n\n  useEffect(() => {\n    let unmounted = false;\n    const setDefaultContestValue = () => {\n      if (!unmounted && contests.length > 0 && contest === '')\n        setContest(contests[0].contest_slug);\n    };\n    void setDefaultContestValue();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [contests]);\n\n  return (\n    <>\n      <Row>\n        <Col sm={12}>\n          <FormGroup style={{ width: '100%' }}>\n            <Label for=\"input-contest\">CONTEST:</Label>\n            <Input\n              type=\"select\"\n              name=\"input-contest\"\n              id=\"input-contest\"\n              value={contest}\n              onChange={(e): void => setContest(e.target.value)}\n            >\n              {contests.map((_contest: Contest) => {\n                return (\n                  <option\n                    value={_contest.contest_slug}\n                    key={_contest.contest_slug}\n                  >\n                    {getContestDropdownLabel(_contest)}\n                  </option>\n                );\n              })}\n            </Input>\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12}>\n          <FormGroup style={{ width: '100%' }}>\n            <Label for=\"input-user\">ATCODER ID (COMMA SEPARATED):</Label>\n            <Input\n              value={user}\n              type=\"text\"\n              name=\"input-user\"\n              id=\"input-user\"\n              placeholder={user ? user : 'user1,user2,...'}\n              onChange={(e): void => setUser(e.target.value)}\n              onKeyPress={(e): void => {\n                if (e.key === 'Enter') {\n                  history.push(chartPagePath);\n                }\n              }}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12}>\n          <Button color=\"primary\" tag={NavLink} to={chartPagePath} block>\n            Replay!\n          </Button>\n        </Col>\n      </Row>\n    </>\n  );\n};\n","export class BinaryIndexedTree {\n  data: number[];\n  length: number;\n  constructor(_length: number) {\n    this.length = _length;\n    this.data = (Array(++_length) as number[]).fill(0);\n  }\n  sum(k: number): number {\n    let ret = 0;\n    for (++k; k > 0; k -= k & -k) ret += this.data[k];\n    return ret;\n  }\n  add(k: number, x: number): void {\n    for (++k; k < this.data.length; k += k & -k) this.data[k] += x;\n  }\n  // query for [l, r)\n  query(l: number, r: number): number {\n    return this.sum(r - 1) - this.sum(l - 1);\n  }\n}\n","import Submission from '../interfaces/Submission';\nimport { BinaryIndexedTree } from './BinaryIndexedTree';\n\nclass ContestUserState {\n  taskScoreMap: Map<string, number>;\n  score: number;\n  afterTargetUser: boolean;\n  constructor() {\n    this.taskScoreMap = new Map<string, number>();\n    this.score = 0;\n    this.afterTargetUser = false;\n  }\n  addSubmission(contestSubmission: Submission): void {\n    const val = contestSubmission.score;\n    if (this.taskScoreMap.has(contestSubmission.task)) {\n      const curVal = this.taskScoreMap.get(contestSubmission.task) as number;\n      if (curVal > val) return;\n      this.score += val - curVal;\n    } else {\n      this.score += val;\n    }\n    this.taskScoreMap.set(contestSubmission.task, val);\n  }\n}\n\nexport interface RankChartData {\n  user: string;\n  time_unix: number;\n  rank: number;\n  score: number;\n  type: 'update' | 'overtook';\n  task: string;\n  status: string;\n  oldScore?: number;\n  overtakeUserName?: string;\n  overtakeUserOldScore?: number;\n  overtakeUserNewScore?: number;\n}\n\nexport const getRankSequence = (\n  user: string,\n  contestSubmissions: Submission[]\n): RankChartData[] => {\n  if (\n    !contestSubmissions.some(\n      (contestSubmission: Submission): boolean =>\n        contestSubmission.user_name === user\n    )\n  ) {\n    return [] as RankChartData[];\n  }\n  // assert ユーザがいる\n\n  // 一度目のシミュレート（各ユーザの得点計算のみ）\n  const scoreSet = new Set<number>();\n  scoreSet.add(0);\n  let userLength;\n  {\n    const userSubmissionsMap = new Map<string, Submission[]>();\n    contestSubmissions.forEach((contestSubmission: Submission): void => {\n      if (userSubmissionsMap.has(contestSubmission.user_name)) {\n        userSubmissionsMap\n          .get(contestSubmission.user_name)\n          ?.push(contestSubmission);\n      } else {\n        userSubmissionsMap.set(contestSubmission.user_name, [\n          contestSubmission,\n        ]);\n      }\n    });\n    userLength = userSubmissionsMap.size;\n\n    userSubmissionsMap.forEach((userSubmissions: Submission[]): void => {\n      const contestUserState = new ContestUserState();\n      userSubmissions.forEach((contestSubmission: Submission): void => {\n        contestUserState.addSubmission(contestSubmission);\n        scoreSet.add(contestUserState.score);\n      });\n    });\n  }\n\n  // 得点一覧を生成\n  const scores: number[] = Array.from(scoreSet.values());\n  void scores.sort((a, b) => a - b);\n\n  // 座圧用辞書を作成\n  const compress = new Map<number, number>();\n  scores.forEach((score: number, index: number): void => {\n    compress.set(score, index);\n  });\n\n  // 二度目のシミュレート（各段階における順位の計算）\n  const bit: BinaryIndexedTree = new BinaryIndexedTree(scores.length); // 各得点に何人いるか\n  bit.add(compress.get(0) as number, userLength); // 全員を 0 点として扱う\n  let curScore = 0;\n  let curRank = 1;\n  const seq: RankChartData[] = [];\n  {\n    const userStateMap = new Map<string, ContestUserState>();\n    contestSubmissions.forEach((contestSubmission: Submission): void => {\n      if (!userStateMap.has(contestSubmission.user_name)) {\n        const tmpUserState = new ContestUserState();\n        tmpUserState.afterTargetUser = true;\n        userStateMap.set(contestSubmission.user_name, tmpUserState);\n      }\n      const contestUserState = userStateMap.get(\n        contestSubmission.user_name\n      ) as ContestUserState;\n      const oldScore = contestUserState.score;\n      // const oldAfterTargetUser = contestUserState.afterTargetUser;\n      contestUserState.addSubmission(contestSubmission);\n      // contestUserState.afterTargetUser = false;\n      const newScore = contestUserState.score;\n      if (newScore !== oldScore) {\n        // スコア更新\n        const oldIndex = compress.get(oldScore) as number;\n        const newIndex = compress.get(newScore) as number;\n        bit.add(oldIndex, -1);\n        bit.add(newIndex, 1);\n        if (contestSubmission.user_name === user) {\n          // curScore 以上の得点を取っている人数が順位\n          curScore = newScore;\n          curRank = bit.query(newIndex, scores.length);\n          seq.push({\n            user: user,\n            type: 'update',\n            time_unix: contestSubmission.time_unix,\n            rank: curRank,\n            score: newScore,\n            oldScore: oldScore,\n            task: contestSubmission.task,\n            status: contestSubmission.status,\n          });\n        } else {\n          if (newScore < curScore) {\n            // 追い越さなかった\n            contestUserState.afterTargetUser = false;\n            return;\n          } else if (newScore === curScore) {\n            // 同点になったけど追い越さなかった\n            contestUserState.afterTargetUser = true;\n            return;\n          } else {\n            // 追い越したか，あるいは最初から高い順位にいるか\n            if (oldScore > curScore) {\n              // 最初から得点が高い\n              contestUserState.afterTargetUser = false;\n              return;\n            } else if (\n              oldScore === curScore &&\n              !contestUserState.afterTargetUser\n            ) {\n              // ターゲットユーザよりも先に今の得点を取っていた\n              return;\n            }\n            // assert 追い越した\n            // console.log(`${oldScore} -> (${curScore}) -> ${newScore}`);\n            seq.push({\n              user: user,\n              type: 'overtook',\n              time_unix: contestSubmission.time_unix,\n              rank: ++curRank,\n              score: curScore,\n              overtakeUserName: contestSubmission.user_name,\n              overtakeUserOldScore: oldScore,\n              overtakeUserNewScore: newScore,\n              task: contestSubmission.task,\n              status: contestSubmission.status,\n            });\n            contestUserState.afterTargetUser = false;\n          }\n        }\n      }\n    });\n  }\n  return seq;\n};\n","export const formatScore = (score: number): string =>\n  String(score).replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,');\n\nexport const formatElapsedSec = (elapsedSec: number): string => {\n  const sign = elapsedSec < 0 ? '-' : '';\n  if (elapsedSec < 0) elapsedSec *= -1;\n  const days = Math.floor(elapsedSec / (3600 * 24));\n  const hours = Math.floor((elapsedSec / 3600) % 24);\n  const minutes = Math.floor((elapsedSec / 60) % 60);\n  const seconds = Math.floor(elapsedSec % 60);\n  const pad = (num: number): string => `0${num}`.slice(-2);\n  return `${sign}${days > 0 ? `${days}d ` : ''}${\n    days > 0 ? pad(hours) : hours\n  }:${pad(minutes)}:${pad(seconds)}`;\n};\n\n/**\n * returns suffix string of order, e.g. \"st\" of \"1st\".\n *\n * @param {number} i number representing order\n * @returns suffix string of order\n */\nexport const ordinalSuffixOf = (i: number): 'st' | 'nd' | 'rd' | 'th' => {\n  const j = i % 10;\n  const k = i % 100;\n  if (j === 1 && k !== 11) {\n    return 'st';\n  }\n  if (j === 2 && k !== 12) {\n    return 'nd';\n  }\n  if (j === 3 && k !== 13) {\n    return 'rd';\n  }\n  return 'th';\n};\n\n/**\n * returns array [start, start+1, ..., end].\n *\n * @param {number} start start number\n * @param {number} end end number\n * @returns {number[]} array\n */\nexport const range = (start: number, end: number): number[] =>\n  Array.from({ length: end - start + 1 }, (v, k) => k + start);\n","import dataFormat from 'dateformat';\nimport Contest from '../interfaces/Contest';\n\nexport const getDatetimeTicks = (contest: Contest): number[] => {\n  const contestDurationHours =\n    (contest.end_time_unix - contest.start_time_unix) / 3600;\n  let interval_sec = 3600;\n  if (contestDurationHours <= 6) {\n    interval_sec = 1800; // 6 時間以内なら 0.5 時間ごとに\n  } else if (contestDurationHours <= 12) {\n    interval_sec = 3600; // 12 時間以内なら 1 時間ごとに\n  } else if (contestDurationHours <= 24) {\n    interval_sec = 3600 * 2; // 24 時間以内なら 2 時間ごとに\n  } else if (contestDurationHours <= 24 * 3) {\n    interval_sec = 3600 * 6; // 3 日以内なら 6 時間ごとに\n  } else {\n    interval_sec = 3600 * 24; // 1 日ごと\n  }\n  const offsetMinutes: number = new Date(0).getTimezoneOffset(); // -9*60 in Asia/Tokyo (JST)\n  const ret: number[] = [contest.start_time_unix];\n  for (\n    let cur =\n      contest.start_time_unix -\n      ((contest.start_time_unix - 60 * offsetMinutes) % interval_sec) +\n      interval_sec;\n    cur < contest.end_time_unix;\n    cur += interval_sec\n  ) {\n    ret.push(cur);\n  }\n  ret.push(contest.end_time_unix);\n  return ret;\n};\n\nexport const getDatetimeTickFormatter = (\n  contest: Contest\n): ((time_unix: number) => string) => {\n  const contestDurationHours =\n    (contest.end_time_unix - contest.start_time_unix) / 3600;\n  let format = '';\n  if (contestDurationHours <= 12) {\n    format = 'HH:MM'; // 12 時間以内なら 1 時間ごとに\n  } else if (contestDurationHours <= 24) {\n    format = 'HH:MM'; // 24 時間以内なら 2 時間ごとに\n  } else if (contestDurationHours <= 24 * 3) {\n    format = 'mm/dd HH:MM'; // 3 日以内なら 6 時間ごとに\n  } else {\n    format = 'mm/dd'; // 1 日ごと\n  }\n  return (time_unix: number) => dataFormat(new Date(time_unix * 1000), format);\n};\n\nexport const scoreTickFormatter = (score: number): string => {\n  let curScore = score;\n  let digitlen = 0;\n  while (curScore >= 10) {\n    curScore /= 10;\n    digitlen++;\n  }\n  return `${curScore.toFixed(1)}e${digitlen}`;\n};\n\nexport const chartLineColors = [\n  '#1F77B4',\n  '#FF7F0E',\n  '#2CA02C',\n  '#D62728',\n  '#9467BD',\n  '#8C564B',\n  '#E377C2',\n  '#7D7F7F',\n  '#BCBD22',\n  '#17BECF',\n];\nexport const getChartLineColor = (index: number): string =>\n  chartLineColors[index % chartLineColors.length];\n","import React from 'react';\nimport { RankChartData } from '../../utils/RankReproducer';\n\ninterface Props {\n  index?: number;\n  offset?: number;\n  position?: string;\n  value?: number;\n  viewBox?: {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n  };\n  x?: number;\n  y?: number;\n  color: string;\n  rankChartDataSequence: RankChartData[];\n  getText: (data: RankChartData) => string;\n  chartId: string;\n}\n\nexport const LineChartLabel: React.FC<Props> = (props) => {\n  const { index, x, y, color, rankChartDataSequence, getText, chartId } = props;\n  if (index === undefined) return <></>;\n  if (x === undefined || y === undefined) return <></>;\n  const data: RankChartData = rankChartDataSequence[index];\n  if (data.type !== 'update') return <></>;\n  const fontSize = 14;\n  const offset = 10;\n  const text = getText(data);\n  const colorFillId = `solid-${chartId}-${data.user}-${index}-color`;\n  return (\n    <g>\n      <defs>\n        <filter id={colorFillId} x=\"-0.05\" y=\"-0.07\" width=\"1.1\" height=\"1.1\">\n          <feFlood floodColor={color} floodOpacity=\"0.8\" />\n          <feComposite operator=\"over\" in=\"SourceGraphic\" />\n        </filter>\n      </defs>\n      <text\n        filter={`url(#${colorFillId})`}\n        x={x}\n        y={y - offset}\n        fontSize={fontSize}\n        fill=\"none\"\n      >\n        {text}\n      </text>\n      <text x={x} y={y - offset} fontSize={fontSize} fill=\"white\">\n        {text}\n      </text>\n    </g>\n  );\n};\n","import React from 'react';\nimport dataFormat from 'dateformat';\nimport { RankChartData } from '../../utils/RankReproducer';\n\ninterface RankLineChartTooltipPayloadContainer {\n  color: string;\n  dataKey: string; // rank\n  fill: string;\n  name: string; // atcoder user name\n  stroke: string;\n  strokeWidth: number;\n  value: number;\n  payload: RankChartData;\n}\n\ninterface Props {\n  active?: boolean;\n  payload?: RankLineChartTooltipPayloadContainer[];\n  label?: number;\n}\n\nexport const LineChartTooltip: React.FC<Props> = (props) => {\n  const { active, payload, label } = props;\n  if (!active || payload === undefined || label === undefined) return <></>;\n  return (\n    <div\n      className=\"recharts-default-tooltip\"\n      style={{\n        margin: '0px',\n        padding: '10px',\n        backgroundColor: 'rgb(255, 255, 255)',\n        border: '1px solid rgb(204, 204, 204)',\n        whiteSpace: 'nowrap',\n      }}\n    >\n      <p className=\"recharts-tooltip-label\" style={{ margin: '0px' }}>\n        {dataFormat(new Date(label * 1000), 'yyyy-mm-dd HH:MM:ss')}\n      </p>\n      {payload\n        .map((payloadContainer: RankLineChartTooltipPayloadContainer) => {\n          const curPayload: RankChartData = payloadContainer.payload;\n          if (\n            payloadContainer.name !== curPayload.user ||\n            label !== curPayload.time_unix\n          ) {\n            return undefined;\n          }\n          return (\n            <div key={payloadContainer.name}>\n              <hr style={{ marginTop: '0.3em', marginBottom: '0.3em' }} />\n              <div\n                style={{ color: payloadContainer.stroke }}\n              >{`User: ${payloadContainer.name}`}</div>\n              <ul\n                className=\"recharts-tooltip-item-list\"\n                style={{ padding: '0px', margin: '0px' }}\n              >\n                <li\n                  className=\"recharts-tooltip-item\"\n                  style={{\n                    display: 'block',\n                    paddingTop: '4px',\n                    paddingBottom: '4px',\n                    color: 'rgb(136, 132, 216)',\n                  }}\n                >\n                  <span className=\"recharts-tooltip-item-name\">Rank</span>\n                  <span className=\"recharts-tooltip-item-separator\"> : </span>\n                  <span className=\"recharts-tooltip-item-value\">\n                    {curPayload.rank}\n                  </span>\n                  <span className=\"recharts-tooltip-item-unit\" />\n                </li>\n              </ul>\n              <div style={{ fontSize: 10 }}>\n                {curPayload.type === 'update' ? (\n                  <>\n                    <div>得点を更新しました:</div>\n                    <div>\n                      <span style={{ color: payloadContainer.stroke }}>\n                        {curPayload.oldScore}\n                      </span>\n                      {' → '}\n                      <span style={{ color: payloadContainer.stroke }}>\n                        {curPayload.score}\n                      </span>\n                    </div>\n                    <div>{`(${curPayload.task} ${curPayload.status})`}</div>\n                  </>\n                ) : (\n                  <>\n                    <div>{`${\n                      curPayload.overtakeUserName ?? ''\n                    } さんに追い抜かれました:`}</div>\n                    <div>\n                      {`${payloadContainer.name}: `}\n                      <span style={{ color: payloadContainer.stroke }}>\n                        {curPayload.score}\n                      </span>\n                    </div>\n                    <div>{`${curPayload.overtakeUserName ?? ''}: ${\n                      curPayload.overtakeUserOldScore ?? ''\n                    } → ${curPayload.overtakeUserNewScore ?? ''}`}</div>\n                    <div\n                      style={{ marginLeft: '1em' }}\n                    >{`(${curPayload.task} ${curPayload.status})`}</div>\n                  </>\n                )}\n              </div>\n            </div>\n          );\n        })\n        .filter((element) => element !== undefined)}\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Label,\n  LabelList,\n} from 'recharts';\nimport Contest from '../../interfaces/Contest';\nimport { ordinalSuffixOf } from '../../utils';\nimport {\n  getChartLineColor,\n  getDatetimeTickFormatter,\n  getDatetimeTicks,\n} from '../../utils/Chart';\nimport { RankChartData } from '../../utils/RankReproducer';\nimport { LineChartLabel } from './LineChartLabel';\nimport { LineChartTooltip } from './LineChartTooltip';\n\ninterface Props {\n  sequences: [string, RankChartData[]][];\n  contest: Contest;\n  showDots: boolean;\n  showACLabels: boolean;\n}\n\nexport const RankLineChart: React.FC<Props> = (props) => {\n  const { sequences, contest, showDots, showACLabels } = props;\n\n  return (\n    <div style={{ width: '100%', height: '500px', marginTop: '50px' }}>\n      <ResponsiveContainer>\n        <LineChart\n          width={1000}\n          height={500}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            type=\"number\"\n            dataKey=\"time_unix\"\n            name=\"unixtime\"\n            domain={[contest.start_time_unix, contest.end_time_unix]}\n            tickFormatter={getDatetimeTickFormatter(contest)}\n            ticks={getDatetimeTicks(contest)}\n          >\n            <Label value=\"Datetime\" offset={0} position=\"insideBottom\" />\n          </XAxis>\n          <YAxis\n            type=\"number\"\n            name=\"rank\"\n            label={{ value: 'Rank', angle: -90, position: 'insideLeft' }}\n            reversed\n          />\n          <Tooltip content={<LineChartTooltip />} />\n          <Legend />\n          {sequences.map((entry: [string, RankChartData[]], index: number) => {\n            const [user, seq] = entry;\n            const color = getChartLineColor(index);\n            return (\n              <Line\n                key={user}\n                data={seq}\n                name={user}\n                dataKey=\"rank\"\n                type=\"stepAfter\"\n                stroke={color}\n                dot={showDots && { fillOpacity: 0.2, strokeWidth: 1 }}\n              >\n                {showACLabels && (\n                  <LabelList\n                    dataKey=\"label\"\n                    position=\"top\"\n                    content={\n                      <LineChartLabel\n                        color={color}\n                        rankChartDataSequence={seq}\n                        getText={(data: RankChartData): string =>\n                          `${data.rank}${ordinalSuffixOf(data.rank)}`\n                        }\n                        chartId=\"rank\"\n                      />\n                    }\n                  />\n                )}\n              </Line>\n            );\n          })}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Label,\n  LabelList,\n} from 'recharts';\nimport Contest from '../../interfaces/Contest';\nimport {\n  getChartLineColor,\n  getDatetimeTickFormatter,\n  getDatetimeTicks,\n  scoreTickFormatter,\n} from '../../utils/Chart';\nimport { RankChartData } from '../../utils/RankReproducer';\nimport { LineChartLabel } from './LineChartLabel';\nimport { LineChartTooltip } from './LineChartTooltip';\n\ninterface Props {\n  sequences: [string, RankChartData[]][];\n  contest: Contest;\n  showDots: boolean;\n  showACLabels: boolean;\n}\n\nexport const ScoreLineChart: React.FC<Props> = (props) => {\n  const { sequences, contest, showDots, showACLabels } = props;\n\n  const scoreUpdateSequences: [\n    string,\n    RankChartData[]\n  ][] = sequences.map(([user, rankChartDataSequence]): [\n    string,\n    RankChartData[]\n  ] => [\n    user,\n    rankChartDataSequence.filter(\n      (rankChartData) => rankChartData.type === 'update'\n    ),\n  ]);\n\n  return (\n    <div style={{ width: '100%', height: '500px', marginTop: '50px' }}>\n      <ResponsiveContainer>\n        <LineChart\n          width={1000}\n          height={500}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            type=\"number\"\n            dataKey=\"time_unix\"\n            name=\"unixtime\"\n            domain={[contest.start_time_unix, contest.end_time_unix]}\n            tickFormatter={getDatetimeTickFormatter(contest)}\n            ticks={getDatetimeTicks(contest)}\n          >\n            <Label value=\"Datetime\" offset={0} position=\"insideBottom\" />\n          </XAxis>\n          <YAxis\n            type=\"number\"\n            name=\"score\"\n            label={{ value: 'Score', angle: -90, position: 'insideLeft' }}\n            tickFormatter={scoreTickFormatter}\n          />\n          <Tooltip content={<LineChartTooltip />} />\n          <Legend />\n          {scoreUpdateSequences.map(\n            (entry: [string, RankChartData[]], index: number) => {\n              const [user, seq] = entry;\n              const color = getChartLineColor(index);\n              return (\n                <Line\n                  key={user}\n                  data={seq}\n                  name={user}\n                  dataKey=\"score\"\n                  type=\"stepAfter\"\n                  stroke={color}\n                  dot={showDots && { fillOpacity: 0.2, strokeWidth: 1 }}\n                >\n                  {showACLabels && (\n                    <LabelList\n                      dataKey=\"label\"\n                      position=\"top\"\n                      content={\n                        <LineChartLabel\n                          color={color}\n                          rankChartDataSequence={seq}\n                          getText={(data: RankChartData): string =>\n                            `${data.score}`\n                          }\n                          chartId=\"score\"\n                        />\n                      }\n                    />\n                  )}\n                </Line>\n              );\n            }\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n","import Contest from '../interfaces/Contest';\nimport Task from '../interfaces/Task';\nimport Submission from '../interfaces/Submission';\n\nconst CONTEST_SUBMISSION_MAP: Map<string, Submission[]> = new Map<\n  string,\n  Submission[]\n>();\nexport const fetchContestSubmissions = async (\n  contest?: string\n): Promise<Submission[]> =>\n  contest !== undefined && contest.length > 0\n    ? !CONTEST_SUBMISSION_MAP.has(contest)\n      ? fetch(`${process.env.PUBLIC_URL}/submissions/${contest}.json`)\n          .catch((e) => {\n            throw Error(e);\n          })\n          .then(async (r) => {\n            const submissions = (await r.json()) as Submission[];\n            CONTEST_SUBMISSION_MAP.set(contest, submissions);\n            return submissions;\n          })\n      : Promise.resolve(CONTEST_SUBMISSION_MAP.get(contest) as Submission[])\n    : Promise.resolve([]);\n\nconst CONTEST_TASK_MAP: Map<string, Task[]> = new Map<string, Task[]>();\nexport const fetchContestTasks = async (contest?: string): Promise<Task[]> =>\n  contest !== undefined && contest.length > 0\n    ? !CONTEST_TASK_MAP.has(contest)\n      ? fetch(`${process.env.PUBLIC_URL}/tasks/${contest}.json`)\n          .catch((e) => {\n            throw Error(e);\n          })\n          .then(async (r) => {\n            const tasks = (await r.json()) as Task[];\n            CONTEST_TASK_MAP.set(contest, tasks);\n            return tasks;\n          })\n      : Promise.resolve(CONTEST_TASK_MAP.get(contest) as Task[])\n    : Promise.resolve([]);\n\nlet CONTESTS: Contest[] | undefined = undefined;\nexport const fetchContests = async (): Promise<Contest[]> =>\n  CONTESTS === undefined\n    ? fetch(`${process.env.PUBLIC_URL}/contests/contests.json`)\n        .catch((e) => {\n          throw Error(e);\n        })\n        .then(async (r) => {\n          CONTESTS = (await r.json()) as Contest[];\n          return CONTESTS;\n        })\n    : Promise.resolve(CONTESTS);\n","import React from 'react';\nimport useSWR from 'swr';\nimport { Alert } from 'reactstrap';\nimport { FormBlock } from './FormBlock';\nimport { ChartBlock } from './ChartBlock';\nimport { fetchContests, fetchContestSubmissions } from '../../utils/Data';\nimport Contest from '../../interfaces/Contest';\nimport Submission from '../../interfaces/Submission';\n\ninterface Props {\n  match: {\n    params: {\n      contest: string;\n      user: string;\n    };\n  };\n}\n\nexport const ChartPage: React.FC<Props> = (props) => {\n  const paramContest: string = props.match.params.contest ?? '';\n  const paramUser: string = props.match.params.user ?? '';\n\n  const { data: contests, error: contestsError } = useSWR<Contest[], Error>(\n    '/contests/contests',\n    fetchContests\n  );\n\n  const { data: contestSubmissions, error: contestSubmissionsError } = useSWR<\n    Submission[],\n    Error\n  >(\n    paramUser.length > 0 && paramContest.length > 0\n      ? `/submissions/${paramContest}`\n      : null,\n    () => {\n      return fetchContestSubmissions(paramContest);\n    }\n  );\n\n  const users = paramUser\n    .split(',')\n    .map((_user) => _user.trim())\n    .filter((_user) => _user !== '');\n\n  const contestMap = contests?.reduce(\n    (prevMap: Map<string, Contest>, contest: Contest): Map<string, Contest> =>\n      prevMap.set(contest.contest_slug, contest),\n    new Map<string, Contest>()\n  );\n  return (\n    <>\n      <h2>Description</h2>\n      <p>\n        AtCoder\n        で行われたマラソンコンテストにおける順位および得点の推移をグラフに表示します．\n      </p>\n      <p>\n        <a\n          href=\"https://atcoder-replay.kakira.dev/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          AtCoder Replay (β)\n        </a>{' '}\n        がマラソンに対応していなかったので作りました．\n      </p>\n\n      <h2>Let&apos;s Replay!</h2>\n      {contestsError ? (\n        <Alert\n          color=\"danger\"\n          style={{\n            marginTop: '50px',\n            marginBottom: '50px',\n          }}\n        >\n          Failed to fetch contest list.\n        </Alert>\n      ) : contests === undefined ? (\n        <div\n          style={{\n            width: '100%',\n            height: '500px',\n            textAlign: 'center',\n            marginTop: '100px',\n            marginBottom: '100px',\n          }}\n        >\n          Fetch contest data...\n        </div>\n      ) : (\n        <FormBlock\n          paramUsers={paramUser}\n          paramContest={paramContest}\n          contests={contests}\n        />\n      )}\n\n      {paramUser.length === 0 ? (\n        <div style={{ height: '50px' }}></div>\n      ) : contestSubmissionsError ? (\n        <Alert\n          color=\"danger\"\n          style={{\n            marginTop: '50px',\n            marginBottom: '50px',\n          }}\n        >\n          Failed to fetch contest submission list.\n        </Alert>\n      ) : contestSubmissions === undefined ? (\n        <div\n          style={{\n            width: '100%',\n            height: '500px',\n            textAlign: 'center',\n            marginTop: '100px',\n            marginBottom: '100px',\n          }}\n        >\n          Fetch contest submissions data...\n        </div>\n      ) : (\n        <ChartBlock\n          users={users}\n          contest={contestMap?.get(paramContest)}\n          contestSubmissions={contestSubmissions}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Button, Input, Row, FormGroup, Label, Col } from 'reactstrap';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport dataFormat from 'dateformat';\nimport Contest from '../../interfaces/Contest';\nimport { formatElapsedSec } from '../../utils';\n\ninterface Props {\n  paramContest: string;\n  contests: Contest[];\n  contestMap?: Map<string, Contest>;\n  parsedDatetime?: Date;\n}\n\nconst generatePath = (contest: string, cursorDate: Date): string =>\n  `/standings/${contest}/${dataFormat(cursorDate, \"yyyy-mm-dd'T'HH:MM:sso\")}`;\nconst getContestDropdownLabel = (contest: Contest): string =>\n  `${dataFormat(new Date(contest.start_time_unix * 1000), 'yyyy-mm-dd')} ${\n    contest.contest_name\n  }`;\n\nexport const FormBlock: React.FC<Props> = (props) => {\n  const { paramContest, contests, contestMap, parsedDatetime } = props;\n  const [contest, setContest] = useState(\n    paramContest !== ''\n      ? paramContest\n      : contests.length > 0\n      ? contests[0].contest_slug\n      : ''\n  );\n  const [cursorDate, setCursorDate] = useState(\n    parsedDatetime !== undefined\n      ? parsedDatetime\n      : contests.length > 0\n      ? new Date(contests[0].end_time_unix * 1000)\n      : new Date()\n  );\n  const standingsPagePath = useMemo(() => generatePath(contest, cursorDate), [\n    contest,\n    cursorDate,\n  ]);\n\n  useEffect(() => {\n    let unmounted = false;\n    const setDefaultContestValue = () => {\n      if (!unmounted && contests.length > 0 && contest === '') {\n        setContest(contests[0].contest_slug);\n        if (parsedDatetime === undefined) {\n          setCursorDate(new Date(contests[0].end_time_unix * 1000));\n        }\n      }\n    };\n    void setDefaultContestValue();\n    const cleanup = () => {\n      unmounted = true;\n    };\n    return cleanup;\n  }, [contests]);\n\n  const _contest: Contest | undefined = contestMap?.get(contest);\n\n  return (\n    <>\n      <Row>\n        <Col sm={12}>\n          <FormGroup style={{ width: '100%' }}>\n            <Label for=\"input-contest\">CONTEST:</Label>\n            <Input\n              type=\"select\"\n              name=\"input-contest\"\n              id=\"input-contest\"\n              value={contest}\n              onChange={(e): void => {\n                setContest(e.target.value);\n                const _contest: Contest | undefined = contestMap?.get(\n                  e.target.value\n                );\n                if (_contest !== undefined) {\n                  const lb = new Date(_contest.start_time_unix * 1000);\n                  const ub = new Date(_contest.end_time_unix * 1000);\n                  if (cursorDate < lb || ub < cursorDate) {\n                    setCursorDate(ub);\n                  }\n                }\n              }}\n            >\n              {contests.map((_contest: Contest) => {\n                return (\n                  <option\n                    value={_contest.contest_slug}\n                    key={_contest.contest_slug}\n                  >\n                    {getContestDropdownLabel(_contest)}\n                  </option>\n                );\n              })}\n            </Input>\n            {_contest && (\n              <div\n                className=\"contest-duration\"\n                style={{\n                  color: '#666',\n                  fontSize: 'small',\n                  margin: '0.2rem',\n                  marginLeft: '1rem',\n                }}\n              >{`Duration: ${dataFormat(\n                new Date(_contest.start_time_unix * 1000),\n                'yyyy-mm-dd(ddd) HH:MMo'\n              )} ~ ${dataFormat(\n                new Date(_contest.end_time_unix * 1000),\n                'yyyy-mm-dd(ddd) HH:MMo'\n              )} (${formatElapsedSec(\n                _contest.end_time_unix - _contest.start_time_unix\n              )})`}</div>\n            )}\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12}>\n          <FormGroup style={{ width: '100%' }}>\n            <div>\n              <Label for=\"input-datetime\">DATETIME:</Label>\n            </div>\n            <DatePicker\n              showTimeSelect\n              dateFormat=\"yyyy-MM-dd HH:mm:ss\"\n              timeFormat=\"HH:mm\"\n              selected={cursorDate}\n              onChange={(date: Date) => setCursorDate(date)}\n              customInput={\n                <Input\n                  value={dataFormat(cursorDate, 'yyyy-mm-dd HH:MM:ss')}\n                  type=\"text\"\n                  name=\"input-datetime\"\n                  id=\"input-datetime\"\n                />\n              }\n              minDate={\n                _contest ? new Date(_contest.start_time_unix * 1000) : undefined\n              }\n              maxDate={\n                _contest ? new Date(_contest.end_time_unix * 1000) : undefined\n              }\n              filterTime={(date: Date): boolean => {\n                if (_contest === undefined) return true;\n                return (\n                  new Date(_contest.start_time_unix * 1000) <= date &&\n                  date <= new Date(_contest.end_time_unix * 1000)\n                );\n              }}\n            />\n            {_contest && (\n              <div\n                className=\"contest-duration\"\n                style={{\n                  color: '#666',\n                  fontSize: 'small',\n                  margin: '0.2rem',\n                  marginLeft: '1rem',\n                }}\n              >{`Elapsed: ${formatElapsedSec(\n                Math.floor(cursorDate.getTime() / 1000) -\n                  _contest.start_time_unix\n              )}`}</div>\n            )}\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12}>\n          <Button color=\"primary\" tag={NavLink} to={standingsPagePath} block>\n            Replay !\n          </Button>\n        </Col>\n      </Row>\n    </>\n  );\n};\n","import React from 'react';\nimport { PaginationOptions } from 'react-bootstrap-table-next';\nimport {\n  Col,\n  Pagination,\n  PaginationItem,\n  PaginationLink,\n  Row,\n} from 'reactstrap';\nimport { range } from '../utils';\nimport './pagination-panel.scss';\n\nconst pageList = (\n  currPage: number,\n  pageStartIndex: number,\n  totalPages: number\n): number[] => {\n  if (totalPages === 0) {\n    return [];\n  }\n  if (totalPages <= 10) {\n    return range(1, totalPages);\n  }\n\n  const pageNumbers = [currPage];\n  let tmpExp = 1;\n  for (;;) {\n    tmpExp *= 2;\n    const tmpPageNumber = currPage - tmpExp + 1;\n    if (tmpPageNumber < pageStartIndex) {\n      break;\n    }\n    pageNumbers.unshift(tmpPageNumber);\n  }\n  if (pageNumbers[0] !== pageStartIndex) {\n    pageNumbers.unshift(pageStartIndex);\n  }\n\n  tmpExp = 1;\n  for (;;) {\n    tmpExp *= 2;\n    const tmpPageNumber = currPage + tmpExp - 1;\n    if (tmpPageNumber > totalPages) {\n      break;\n    }\n    pageNumbers.push(tmpPageNumber);\n  }\n  if (pageNumbers.slice(-1)[0] !== totalPages) {\n    pageNumbers.push(totalPages);\n  }\n\n  return pageNumbers;\n};\n\ninterface PaginationChildProps extends PaginationOptions {\n  tableId?: string;\n  bootstrap4?: boolean;\n}\n\ninterface PaginationPanelProps extends PaginationChildProps {\n  renderSizePerPage: boolean;\n}\n\nexport const PaginationPanel: React.FC<PaginationPanelProps> = (props) => {\n  const {\n    renderSizePerPage,\n    totalSize,\n    sizePerPage,\n    sizePerPageList,\n    onSizePerPageChange,\n    page,\n    pageStartIndex,\n    onPageChange,\n  } = props;\n  if (\n    page === undefined ||\n    pageStartIndex === undefined ||\n    onPageChange === undefined ||\n    totalSize === undefined ||\n    sizePerPage === undefined ||\n    sizePerPageList === undefined ||\n    onSizePerPageChange === undefined\n  )\n    return null;\n  const totalPages = Math.ceil(totalSize / sizePerPage);\n  const pageNumbers = pageList(page, pageStartIndex, totalPages);\n\n  return (\n    <div className=\"pagination-panel-parent\">\n      {renderSizePerPage && (\n        <>\n          <Row>\n            <Col className=\"size-per-page\">\n              <span className=\"small\">\n                {'per page: '}\n                {(sizePerPageList as number[]).map((p) => (\n                  <a\n                    key={p}\n                    className={`standings-per-page${\n                      p === sizePerPage ? ' active' : ''\n                    }`}\n                    onClick={() => onSizePerPageChange(p, 1)}\n                  >\n                    {p}\n                  </a>\n                ))}\n              </span>\n            </Col>\n          </Row>\n          <hr className=\"size-per-page-splitter\" />\n        </>\n      )}\n      <Row>\n        <Col>\n          <Pagination\n            className=\"pagination-sm\"\n            style={{ flexWrap: 'wrap', justifyContent: 'center' }}\n          >\n            {pageNumbers.map((pageNumber) => (\n              <PaginationItem key={pageNumber} active={pageNumber === page}>\n                <PaginationLink\n                  onClick={() => onPageChange(pageNumber, sizePerPage)}\n                >\n                  {pageNumber}\n                </PaginationLink>\n              </PaginationItem>\n            ))}\n          </Pagination>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n","import React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport BootstrapTable, {\n  ColumnDescription,\n  SortOrder,\n} from 'react-bootstrap-table-next';\nimport paginationFactory, {\n  PaginationProvider,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faSort,\n  faSortDown,\n  faSortUp,\n  faSearch,\n} from '@fortawesome/free-solid-svg-icons';\nimport { TwitterIcon, TwitterShareButton } from 'react-share';\nimport dataFormat from 'dateformat';\nimport { PaginationPanel } from '../../components/PaginationPanel';\nimport { formatScore, formatElapsedSec } from '../../utils';\nimport Contest from '../../interfaces/Contest';\nimport Submission from '../../interfaces/Submission';\nimport Task from '../../interfaces/Task';\nimport './standings-table.css';\n\ninterface UserStandingsTaskEntry {\n  score: number;\n  score_time: number;\n  submit_count: number; // CE 以外の提出回数\n  submit_count_ce: number;\n}\n\ninterface UserStandingsEntry extends UserStandingsTaskEntry {\n  user_name: string;\n  rank: number;\n  tasks: Map<string, UserStandingsTaskEntry>; // 問題ごとの得点\n}\n\nconst compareUserStandingsTaskEntry = (\n  a: UserStandingsTaskEntry,\n  b: UserStandingsTaskEntry\n): number => {\n  // スコアが高いほうが順位が上\n  if (a.score != b.score) return b.score - a.score;\n  if (a.score > 0) {\n    // 正の得点同士なら\n    if (a.score_time != b.score_time) return a.score_time - b.score_time;\n    return a.submit_count - b.submit_count;\n  } else {\n    // 0 点同士なら\n    return 0;\n  }\n};\n\nconst _sortCaret = (order: 'asc' | 'desc' | undefined): JSX.Element => {\n  if (order === 'asc')\n    return (\n      <FontAwesomeIcon\n        style={{\n          marginLeft: '6px',\n          marginTop: '0.2rem',\n          marginBottom: '-0.2rem',\n        }}\n        icon={faSortUp}\n      />\n    );\n  if (order === 'desc')\n    return (\n      <FontAwesomeIcon\n        style={{\n          marginLeft: '6px',\n          marginTop: '-0.2rem',\n          marginBottom: '0.2rem',\n        }}\n        icon={faSortDown}\n      />\n    );\n  return <FontAwesomeIcon style={{ marginLeft: '6px' }} icon={faSort} />;\n};\n\ninterface Props {\n  contest?: Contest;\n  contestSubmissions: Submission[];\n  contestTasks: Task[];\n  parsedDatetime: Date;\n}\n\nexport const StandingsTable: React.FC<Props> = (props) => {\n  const { contest, contestSubmissions, contestTasks, parsedDatetime } = props;\n\n  if (contest === undefined) {\n    return <div style={{ height: '50px' }}></div>;\n  }\n  if (contestSubmissions.length === 0 || contestTasks.length === 0) {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '500px',\n          textAlign: 'center',\n          marginTop: '100px',\n          marginBottom: '100px',\n        }}\n      >\n        Fetch data...\n      </div>\n    );\n  }\n\n  // generate standings\n  const userStandingsEntriesMap = new Map<string, UserStandingsEntry>();\n  contestSubmissions.forEach((contestSubmission: Submission): void => {\n    // filter by datetime\n    const curDatetime = new Date(contestSubmission.time_unix * 1000);\n    if (curDatetime > parsedDatetime) return;\n\n    // initialize/get entry\n    let userStandingsEntry: UserStandingsEntry;\n    if (userStandingsEntriesMap.has(contestSubmission.user_name)) {\n      userStandingsEntry = userStandingsEntriesMap.get(\n        contestSubmission.user_name\n      ) as UserStandingsEntry;\n    } else {\n      userStandingsEntry = {\n        user_name: contestSubmission.user_name,\n        score: 0,\n        score_time: 0,\n        submit_count: 0,\n        submit_count_ce: 0,\n        rank: -1,\n        tasks: contestTasks.reduce(\n          (prevMap: Map<string, UserStandingsTaskEntry>, curTask: Task) =>\n            prevMap.set(curTask.task_slug, {\n              score: 0,\n              score_time: 0,\n              submit_count: 0,\n              submit_count_ce: 0,\n            }),\n          new Map<string, UserStandingsTaskEntry>()\n        ),\n      } as UserStandingsEntry;\n      userStandingsEntriesMap.set(\n        contestSubmission.user_name,\n        userStandingsEntry\n      );\n    }\n    // update entry\n    const targetTaskEntry = userStandingsEntry.tasks.get(\n      contestSubmission.task\n    ) as UserStandingsTaskEntry;\n    if (contestSubmission.status == 'CE') {\n      userStandingsEntry.submit_count_ce++;\n      targetTaskEntry.submit_count_ce++;\n    } else {\n      userStandingsEntry.submit_count++;\n      targetTaskEntry.submit_count++;\n    }\n    if (contestSubmission.score > targetTaskEntry.score) {\n      userStandingsEntry.score +=\n        contestSubmission.score - targetTaskEntry.score;\n      userStandingsEntry.score_time = contestSubmission.time_unix;\n      targetTaskEntry.score = contestSubmission.score;\n      targetTaskEntry.score_time = contestSubmission.time_unix;\n    }\n  });\n  const userStandingsEntries: UserStandingsEntry[] = Array.from(\n    userStandingsEntriesMap.values()\n  );\n  userStandingsEntries.sort(compareUserStandingsTaskEntry);\n  userStandingsEntries.reduce((prev, userStandingsEntry, index) => {\n    if (prev === -1) {\n      userStandingsEntry.rank = index + 1;\n      return 0;\n    } else if (\n      userStandingsEntry.score === userStandingsEntries[prev].score &&\n      (userStandingsEntry.score === 0 ||\n        (userStandingsEntry.score_time ===\n          userStandingsEntries[prev].score_time &&\n          userStandingsEntry.submit_count ===\n            userStandingsEntries[prev].submit_count))\n    ) {\n      userStandingsEntry.rank = prev + 1;\n      return prev;\n    } else {\n      userStandingsEntry.rank = index + 1;\n      return index;\n    }\n  }, -1);\n\n  const columns: ColumnDescription[] = [\n    {\n      dataField: 'rank',\n      text: 'Rank',\n      sort: true,\n      classes: 'standings-rank',\n      headerClasses: 'standings-rank-head',\n      sortFunc: function _sortFunc(a: number, b: number, order: SortOrder) {\n        if (order === 'desc') {\n          return a - b;\n        } else {\n          return b - a;\n        }\n      },\n      sortCaret: _sortCaret,\n    },\n    {\n      dataField: 'user_name',\n      text: 'User',\n      sort: true,\n      classes: 'standings-username',\n      headerClasses: 'standings-username-head',\n      filter: textFilter(),\n      formatter: function _formatter(\n        cell: string,\n        _row: UserStandingsEntry,\n        _rowIndex: number,\n        _contest: Contest\n      ) {\n        const btnId = `standings-user-btn-submission-${cell}`;\n        return (\n          <>\n            <a\n              href={`https://atcoder.jp/users/${cell}`}\n              className=\"username\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <span className=\"user\">{cell}</span>\n            </a>\n            <span className=\"standings-user-btn\">\n              <a\n                href={`https://atcoder.jp/contests/${_contest.contest_slug}/submissions?f.User=${cell}`}\n                id={btnId}\n              >\n                <FontAwesomeIcon icon={faSearch} />\n              </a>\n              <UncontrolledTooltip placement=\"top\" target={btnId}>\n                {`view ${cell}'s submissions`}\n              </UncontrolledTooltip>\n            </span>\n          </>\n        );\n      },\n      formatExtraData: contest,\n      sortFunc: function _sortFunc(a: string, b: string, order: SortOrder) {\n        if (order === 'desc') {\n          return a > b ? 1 : -1;\n        } else {\n          return b < a ? -1 : 1;\n        }\n      },\n      sortCaret: _sortCaret,\n    },\n    {\n      dataField: 'score',\n      text: 'Score',\n      sort: true,\n      classes: 'standings-result',\n      headerClasses: 'standings-result-head',\n      formatter: function _formatter(\n        cell: number,\n        row: UserStandingsEntry,\n        _rowIndex: number,\n        _contest: Contest\n      ) {\n        return (\n          <>\n            <p>\n              {cell > 0 && (\n                <span className=\"standings-score\">{formatScore(cell)}</span>\n              )}\n              {cell <= 0 ? (\n                <span>(0)</span>\n              ) : row.submit_count >= 2 ? (\n                <span className=\"standings-wa\">{` (${\n                  row.submit_count - 1\n                })`}</span>\n              ) : (\n                <></>\n              )}\n            </p>\n            <p>\n              {row.score_time > 0 &&\n                formatElapsedSec(row.score_time - _contest.start_time_unix)}\n            </p>\n          </>\n        );\n      },\n      formatExtraData: contest,\n      sortFunc: function _sortFunc(\n        _a: number,\n        _b: number,\n        order: SortOrder,\n        _dataField: string,\n        rowA: UserStandingsEntry,\n        rowB: UserStandingsEntry\n      ) {\n        if (order === 'desc') {\n          return compareUserStandingsTaskEntry(rowA, rowB);\n        } else {\n          return compareUserStandingsTaskEntry(rowB, rowA);\n        }\n      },\n      sortCaret: _sortCaret,\n    },\n    ...contestTasks.map(\n      (task: Task): ColumnDescription => {\n        return {\n          dataField: `tasks_${task.task_slug}`,\n          isDummyField: true,\n          text: task.label,\n          sort: true,\n          classes: 'standings-result',\n          headerClasses: 'standings-result-head',\n          formatter: function _formatter(\n            _cell: null,\n            row: UserStandingsEntry,\n            _rowIndex: number,\n            formatExtraData: { task: Task; contest: Contest }\n          ) {\n            const { task, contest: _contest } = formatExtraData;\n            const userTaskEntry = row.tasks.get(\n              task.task_slug\n            ) as UserStandingsTaskEntry;\n            return (\n              <>\n                <p>\n                  {userTaskEntry.score > 0 && (\n                    <span className=\"standings-ac\">\n                      {formatScore(userTaskEntry.score)}\n                    </span>\n                  )}\n                  {userTaskEntry.submit_count === 0 &&\n                  userTaskEntry.submit_count_ce > 0 &&\n                  userTaskEntry.score <= 0 ? (\n                    <span>(0)</span>\n                  ) : userTaskEntry.submit_count >= 1 &&\n                    userTaskEntry.score <= 0 ? (\n                    <span className=\"standings-wa\">{` (${userTaskEntry.submit_count})`}</span>\n                  ) : userTaskEntry.submit_count >= 2 ? (\n                    <span className=\"standings-wa\">{` (${\n                      userTaskEntry.submit_count - 1\n                    })`}</span>\n                  ) : (\n                    <></>\n                  )}\n                </p>\n                <p>\n                  {userTaskEntry.score_time > 0 &&\n                    formatElapsedSec(\n                      userTaskEntry.score_time - _contest.start_time_unix\n                    )}\n                </p>\n              </>\n            );\n          },\n          formatExtraData: { task, contest },\n          headerFormatter: function _formatter(\n            column: ColumnDescription,\n            _colIndex: number,\n            components: { sortElement: JSX.Element; filterElement: JSX.Element }\n          ) {\n            return (\n              <>\n                <a\n                  href={`https://atcoder.jp/contests/${task.contest_slug}/tasks/${task.task_slug}`}\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                >\n                  {column.text}\n                </a>\n                {components.sortElement}\n              </>\n            );\n          },\n          sortFunc: function _sortFunc(\n            _a: null,\n            _b: null,\n            order: SortOrder,\n            _dataField: string,\n            rowA: UserStandingsEntry,\n            rowB: UserStandingsEntry\n          ) {\n            const entryA = rowA.tasks.get(\n              task.task_slug\n            ) as UserStandingsTaskEntry;\n            const entryB = rowB.tasks.get(\n              task.task_slug\n            ) as UserStandingsTaskEntry;\n            if (order === 'desc') {\n              return compareUserStandingsTaskEntry(entryA, entryB);\n            } else {\n              return compareUserStandingsTaskEntry(entryB, entryA);\n            }\n          },\n          sortCaret: _sortCaret,\n        };\n      }\n    ), // end map\n  ];\n\n  let maxRankText = '';\n  if (userStandingsEntries.length > 0) {\n    maxRankText = `\\n1位は ${\n      userStandingsEntries[0].user_name\n    } さん (${formatScore(userStandingsEntries[0].score)} 点) だよ！`;\n  }\n\n  const tweetTitle =\n    `Replay of ${contest.contest_name} at ${dataFormat(\n      parsedDatetime,\n      'yyyy-mm-dd HH:MM:sso'\n    )}\\n` +\n    `${maxRankText}\\n` +\n    `AtCoder Marathon Replay`;\n\n  return (\n    <>\n      <hr />\n      <h4\n        style={{\n          textAlign: 'center',\n          marginTop: '30px',\n        }}\n      >\n        Replay of {contest.contest_name}\n      </h4>\n      <h5\n        style={{\n          textAlign: 'center',\n        }}\n      >\n        at {dataFormat(parsedDatetime, 'yyyy-mm-dd(ddd) HH:MM:sso')} (\n        {formatElapsedSec(\n          Math.floor(parsedDatetime.getTime() / 1000) - contest.start_time_unix\n        )}{' '}\n        elapsed)\n      </h5>\n      <PaginationProvider\n        pagination={paginationFactory({\n          custom: true,\n          sizePerPage: 20,\n          sizePerPageList: [10, 20, 50, 100, 1000],\n          totalSize: userStandingsEntries.length,\n        })}\n      >\n        {({ paginationProps, paginationTableProps }) => {\n          paginationTableProps.keyField = 'user_name';\n          paginationTableProps.data = userStandingsEntries;\n          paginationTableProps.columns = columns;\n          return (\n            <div>\n              <PaginationPanel renderSizePerPage={true} {...paginationProps} />\n              <BootstrapTable\n                bootstrap4\n                classes=\"th-center th-middle td-center td-middle table-standings\"\n                striped\n                // keyField=\"user_name\"\n                // data={userStandingsEntries}\n                // columns={columns}\n                filter={filterFactory()}\n                wrapperClasses=\"table-responsive\"\n                {...paginationTableProps}\n              />\n              <PaginationPanel renderSizePerPage={false} {...paginationProps} />\n            </div>\n          );\n        }}\n      </PaginationProvider>\n      <div style={{ textAlign: 'center' }}>\n        <TwitterShareButton\n          url={window.location.href}\n          title={tweetTitle}\n          id=\"standings-table-share-button\"\n        >\n          <TwitterIcon size={40} round />\n        </TwitterShareButton>\n        <UncontrolledTooltip\n          placement=\"top\"\n          target=\"standings-table-share-button\"\n        >\n          {(tweetTitle + ' ' + window.location.href).replaceAll('\\n', ' ')}\n        </UncontrolledTooltip>\n      </div>\n      <hr />\n    </>\n  );\n};\n","import React from 'react';\nimport useSWR from 'swr';\nimport { Alert } from 'reactstrap';\nimport { FormBlock } from './FormBlock';\nimport { StandingsTable } from './StandingsTable';\nimport {\n  fetchContests,\n  fetchContestSubmissions,\n  fetchContestTasks,\n} from '../../utils/Data';\nimport Contest from '../../interfaces/Contest';\nimport Submission from '../../interfaces/Submission';\nimport Task from '../../interfaces/Task';\n\ninterface Props {\n  match: {\n    params: {\n      contest: string;\n      datetime: string;\n    };\n  };\n}\n\nconst datetimeRegExp = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)[+-](\\d\\d)(\\d\\d)$/;\nconst parseParamDatetime = (paramDatetime: string): Date | undefined => {\n  const datetimeRegExpMatch = datetimeRegExp.exec(paramDatetime);\n  if (datetimeRegExpMatch === null) return undefined;\n  return new Date(paramDatetime);\n};\n\nexport const StandingsPage: React.FC<Props> = (props) => {\n  const paramContest: string = props.match.params.contest ?? '';\n  const paramDatetime: string = props.match.params.datetime ?? '';\n  const parsedDatetime = parseParamDatetime(paramDatetime);\n\n  const { data: contests, error: contestsError } = useSWR<Contest[], Error>(\n    '/contests/contests',\n    fetchContests\n  );\n\n  const { data: contestTasks, error: contestTasksError } = useSWR<\n    Task[],\n    Error\n  >(paramContest.length > 0 ? `/tasks/${paramContest}` : null, () => {\n    return fetchContestTasks(paramContest);\n  });\n\n  const { data: contestSubmissions, error: contestSubmissionsError } = useSWR<\n    Submission[],\n    Error\n  >(paramContest.length > 0 ? `/submissions/${paramContest}` : null, () => {\n    return fetchContestSubmissions(paramContest);\n  });\n\n  const contestMap = contests?.reduce(\n    (prevMap: Map<string, Contest>, contest: Contest): Map<string, Contest> =>\n      prevMap.set(contest.contest_slug, contest),\n    new Map<string, Contest>()\n  );\n  return (\n    <>\n      <h2>Description</h2>\n      <p>\n        AtCoder\n        で行われたマラソンコンテストの，コンテスト中のある時点での順位表を表示します．\n      </p>\n\n      <h2>Let&apos;s Replay!</h2>\n      {contestsError ? (\n        <Alert\n          color=\"danger\"\n          style={{\n            marginTop: '50px',\n            marginBottom: '50px',\n          }}\n        >\n          Failed to fetch contest list.\n        </Alert>\n      ) : contests === undefined ? (\n        <div\n          style={{\n            width: '100%',\n            height: '500px',\n            textAlign: 'center',\n            marginTop: '100px',\n            marginBottom: '100px',\n          }}\n        >\n          Fetch contest data...\n        </div>\n      ) : (\n        <FormBlock\n          paramContest={paramContest}\n          contests={contests}\n          contestMap={contestMap}\n          parsedDatetime={parsedDatetime}\n        />\n      )}\n\n      {contestSubmissionsError ? (\n        <Alert\n          color=\"danger\"\n          style={{\n            marginTop: '50px',\n            marginBottom: '50px',\n          }}\n        >\n          Failed to fetch contest submission list.\n        </Alert>\n      ) : contestTasksError ? (\n        <Alert\n          color=\"danger\"\n          style={{\n            marginTop: '50px',\n            marginBottom: '50px',\n          }}\n        >\n          Failed to fetch contest task list.\n        </Alert>\n      ) : paramContest !== '' &&\n        (contestSubmissions === undefined || contestTasks === undefined) ? (\n        <div\n          style={{\n            width: '100%',\n            height: '500px',\n            textAlign: 'center',\n            marginTop: '100px',\n            marginBottom: '100px',\n          }}\n        >\n          Fetch contest submissions/tasks data...\n        </div>\n      ) : contestSubmissions === undefined || contestTasks === undefined ? (\n        <div style={{ height: '50px' }}></div>\n      ) : parsedDatetime === undefined ? (\n        <Alert\n          color=\"danger\"\n          style={{\n            marginTop: '50px',\n            marginBottom: '50px',\n          }}\n        >\n          Invalid datetime format.\n        </Alert>\n      ) : (\n        <StandingsTable\n          contest={contestMap?.get(paramContest)}\n          contestSubmissions={contestSubmissions}\n          contestTasks={contestTasks}\n          parsedDatetime={parsedDatetime}\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { Container } from 'reactstrap';\nimport { SWRConfig } from 'swr';\nimport { NavigationBar } from './components/NavigationBar';\nimport { Supplement } from './components/Supplement';\nimport { ChartPage } from './pages/chart';\nimport { StandingsPage } from './pages/standings';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <SWRConfig value={{ revalidateOnFocus: false }}>\n        <Router>\n          <NavigationBar />\n          <Container\n            style={{ width: '100%', maxWidth: '90%', marginTop: '80px' }}\n          >\n            <Switch>\n              <Route\n                exact\n                path=\"/chart/:contest/:user\"\n                component={ChartPage as React.FC}\n              />\n              <Route\n                exact\n                path=\"/chart/:contest/\"\n                component={ChartPage as React.FC}\n              />\n              <Route\n                exact\n                path=\"/standings/:contest/:datetime\"\n                component={StandingsPage as React.FC}\n              />\n              <Route\n                exact\n                path=\"/standings/:contest/\"\n                component={StandingsPage as React.FC}\n              />\n              <Route exact path=\"/chart/\" component={ChartPage as React.FC} />\n              <Route\n                exact\n                path=\"/standings/\"\n                component={StandingsPage as React.FC}\n              />\n              <Redirect path=\"/\" to=\"/chart/\" />\n            </Switch>\n            <Supplement />\n          </Container>\n          <footer\n            className=\"footer\"\n            style={{\n              marginTop: '30px',\n              padding: '30px',\n              backgroundColor: '#efefef',\n            }}\n          >\n            <div className=\"container\">\n              連絡先:{' '}\n              <a\n                href=\"https://twitter.com/iiljj\"\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                si (@iiljj) / Twitter\n              </a>\n              {', '}\n              <a\n                href=\"https://github.com/iilj\"\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                iilj (iilj) / GitHub\n              </a>\n            </div>\n          </footer>\n        </Router>\n      </SWRConfig>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import('web-vitals').then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      }\n    );\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}