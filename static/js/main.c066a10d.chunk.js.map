{"version":3,"sources":["pages/chart/ChartBlock.tsx","utils/Data.ts","utils/index.ts","pages/chart/FormBlock.tsx","utils/BinaryIndexedTree.ts","utils/RankReproducer.ts","utils/Chart.ts","pages/chart/RankLineChartLabel.tsx","pages/chart/RankLineChartTooltip.tsx","pages/chart/RankLineChart.tsx","pages/chart/ScoreLineChartLabel.tsx","pages/chart/ScoreLineChart.tsx","pages/chart/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChartTab","fetchContestSubmissions","contest","a","undefined","length","fetch","process","then","r","json","Promise","resolve","fetchContests","dateToString","_date","format","year","getFullYear","toString","month","getMonth","slice","date","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","replace","getContestDropdownLabel","Date","start_time_unix","contest_name","FormBlock","props","paramUsers","paramContest","contests","useState","setContest","user","setUser","chartPagePath","useMemo","generatePath","history","useHistory","Row","Col","sm","FormGroup","style","width","Label","Input","type","name","id","value","onChange","e","target","map","_contest","contest_slug","for","placeholder","onKeyPress","key","push","Button","color","tag","NavLink","to","block","BinaryIndexedTree","_length","data","this","Array","fill","k","ret","x","l","sum","ContestUserState","taskScoreMap","score","afterTargetUser","Map","contestSubmission","val","has","task","curVal","get","set","getRankSequence","contestSubmissions","some","user_name","userLength","scoreSet","Set","add","userSubmissionsMap","forEach","size","userSubmissions","contestUserState","addSubmission","scores","from","values","sort","b","compress","index","bit","curScore","curRank","seq","userStateMap","tmpUserState","oldScore","newScore","oldIndex","newIndex","query","time_unix","rank","status","overtakeUserName","overtakeUserOldScore","overtakeUserNewScore","getDatetimeTicks","contestDurationHours","end_time_unix","interval_sec","cur","getDatetimeTickFormatter","scoreTickFormatter","digitlen","toFixed","chartLineColors","getChartLineColor","RankLineChartLabel","y","rankChartDataSequence","text","i","j","ordinalSuffixOf","fillId","height","floodColor","in","operator","filter","fontSize","RankLineChartTooltip","active","payload","label","className","margin","padding","backgroundColor","border","whiteSpace","payloadContainer","curPayload","marginTop","marginBottom","stroke","display","paddingTop","paddingBottom","marginLeft","element","RankLineChart","sequences","showDots","showACLabels","ResponsiveContainer","LineChart","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","domain","tickFormatter","ticks","offset","position","YAxis","angle","reversed","Tooltip","content","Legend","entry","Line","dot","fillOpacity","strokeWidth","LabelList","ScoreLineChartLabel","ScoreLineChart","scoreUpdateSequences","rankChartData","ChartBlock","users","setShowDots","showScoreUpdateLabels","setShowScoreUpdateLabels","activeTab","setActiveTab","textAlign","every","maxRankText","reduce","prev","rankChartdata","maxtime","maxrank","tweetTitle","join","ButtonGroup","onClick","TwitterShareButton","url","window","location","href","title","TwitterIcon","round","UncontrolledTooltip","placement","replaceAll","check","checked","ChartPage","connect","contestsFetch","contestSubmissionsFetch","comparison","match","params","fulfilled","paramUser","split","_user","trim","contestMap","prevMap","rel","App","Navbar","light","expand","fixed","NavbarBrand","Link","Container","maxWidth","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c066a10d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { TwitterIcon, TwitterShareButton } from \"react-share\";\nimport {\n  Input,\n  Row,\n  FormGroup,\n  Label,\n  Col,\n  ButtonGroup,\n  Button,\n  UncontrolledTooltip,\n} from \"reactstrap\";\nimport Contest from \"../../interfaces/Contest\";\nimport Submission from \"../../interfaces/Submission\";\nimport { dateToString } from \"../../utils\";\nimport { getRankSequence, RankChartData } from \"../../utils/RankReproducer\";\nimport { RankLineChart } from \"./RankLineChart\";\nimport { ScoreLineChart } from \"./ScoreLineChart\";\n\nenum ChartTab {\n  'rank' = 0,\n  'score' = 1,\n}\n\ninterface Props {\n  users: string[];\n  contest?: Contest;\n  contestSubmissions: Submission[];\n}\n\nexport const ChartBlock: React.FC<Props> = (props) => {\n  const { users, contest, contestSubmissions } = props;\n\n  const [showDots, setShowDots] = useState<boolean>(true);\n  const [showScoreUpdateLabels, setShowScoreUpdateLabels] = useState<boolean>(true);\n  const [activeTab, setActiveTab] = useState<ChartTab>(ChartTab.rank);\n\n  if (!contest || users.length === 0) {\n    return (\n      <div style={{ height: '50px' }}></div>\n    );\n  }\n  if (contestSubmissions.length === 0) {\n    return (\n      <div style={{ width: '100%', height: '500px', textAlign: 'center', marginTop: '100px', marginBottom: '100px' }}>Fetch data...</div>\n    );\n  }\n\n  const sequences: [string, RankChartData[]][] = users.map(user => [user, getRankSequence(user, contestSubmissions)]);\n  if (sequences.every(entry => entry[1].length === 0)) {\n    return (\n      <div style={{ width: '100%', height: '500px', textAlign: 'center', marginTop: '100px', marginBottom: '100px' }}>Invalid UserName</div>\n    );\n  }\n\n  let maxRankText = '';\n  if (sequences.length === 1) {\n    const [maxtime, maxrank] = sequences[0][1].reduce(\n      (prev: [number, number], rankChartdata: RankChartData): [number, number] => {\n        if (rankChartdata.type !== 'update') return prev;\n        const prevRank = prev[1];\n        if (prevRank < rankChartdata.rank) return prev;\n        return [rankChartdata.time_unix, rankChartdata.rank];\n      }, [-1, contestSubmissions.length] as [number, number]);\n    maxRankText = `\\n最大瞬間風速は ${maxrank} 位 (${dateToString(new Date(maxtime * 1000), 'MM/DD hh:mm')}) だよ！`;\n  }\n  const tweetTitle = `${users.join(',')}'s replay of ${contest.contest_name}\n  ${maxRankText}\n  AtCoder Marathon Replay`;\n\n  return (\n    <>\n      <Row style={{ marginTop: '30px' }}>\n        <Col sm={12}>\n          <ButtonGroup className=\"table-tab\">\n            <Button\n              color=\"secondary\"\n              onClick={() => {\n                setActiveTab(ChartTab.rank);\n              }}\n              active={activeTab === ChartTab.rank}\n            >\n              Rank\n          </Button>\n            <Button\n              color=\"secondary\"\n              onClick={() => {\n                setActiveTab(ChartTab.score);\n              }}\n              active={activeTab === ChartTab.score}\n            >\n              Score\n          </Button>\n          </ButtonGroup>\n        </Col>\n      </Row>\n\n      <h4 style={{ textAlign: 'center', marginTop: '30px', marginBottom: '-30px' }}>Replay of {contest.contest_name}</h4>\n      {(activeTab === ChartTab.rank) && (\n        <RankLineChart\n          sequences={sequences}\n          contest={contest}\n          showDots={showDots}\n          showACLabels={showScoreUpdateLabels} />\n      )}\n      {(activeTab === ChartTab.score) && (\n        <ScoreLineChart\n          sequences={sequences}\n          contest={contest}\n          showDots={showDots}\n          showACLabels={showScoreUpdateLabels} />\n      )}\n\n      <div style={{ textAlign: 'center' }}>\n        <TwitterShareButton url={window.location.href} title={tweetTitle} id='UncontrolledTooltipExample'>\n          <TwitterIcon size={40} round />\n        </TwitterShareButton>\n        <UncontrolledTooltip placement=\"top\" target=\"UncontrolledTooltipExample\">\n          {(tweetTitle + ' ' + window.location.href).replaceAll(\"\\n\", ' ')}\n        </UncontrolledTooltip>\n      </div>\n\n      <h2>Display Options</h2>\n      <p>\n        <Row>\n          <Col sm={12}>\n            <FormGroup style={{ width: '100%' }} check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  checked={showDots}\n                  onChange={(e) => setShowDots(e.target.checked)}\n                />\n            Show Dots\n          </Label>\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={12}>\n            <FormGroup style={{ width: '100%' }} check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  checked={showScoreUpdateLabels}\n                  onChange={(e) => setShowScoreUpdateLabels(e.target.checked)}\n                />\n            Show Score Update Labels\n          </Label>\n            </FormGroup>\n          </Col>\n        </Row>\n      </p>\n    </>\n  )\n};","import Contest from \"../interfaces/Contest\";\nimport Submission from \"../interfaces/Submission\";\n\nexport const fetchContestSubmissions = async (contest?: string): Promise<Submission[]> =>\n  (contest !== undefined && contest.length > 0)\n    ? fetch(`${process.env.PUBLIC_URL}/submissions/${contest}.json`)\n      .then((r) => r.json() as Promise<Submission[]>)\n    : Promise.resolve([]);\n\nexport const fetchContests = async (): Promise<Contest[]> =>\n  fetch(`${process.env.PUBLIC_URL}/contests/contests.json`)\n    .then((r) => r.json() as Promise<Contest[]>);","\nexport const dateToString = (_date: Date, format: string = 'YYYY-MM-DD hh:mm:ss'): string => {\n  const year = _date.getFullYear().toString();\n  const month = ('0' + (1 + _date.getMonth())).slice(-2);\n  const date = ('0' + _date.getDate()).slice(-2);\n  const hours = ('0' + _date.getHours()).slice(-2);\n  const minutes = ('0' + _date.getMinutes()).slice(-2);\n  const seconds = ('0' + _date.getSeconds()).slice(-2);\n\n  return format\n    .replace(/YYYY/g, year)\n    .replace(/MM/g, month)\n    .replace(/DD/g, date)\n    .replace(/hh/g, hours)\n    .replace(/mm/g, minutes)\n    .replace(/ss/g, seconds)\n};\n\n/**\n * returns suffix string of order, e.g. \"st\" of \"1st\".\n *\n * @param {number} i number representing order\n * @returns suffix string of order\n */\nexport const ordinalSuffixOf = (i: number): 'st' | 'nd' | 'rd' | 'th' => {\n  const j = i % 10;\n  const k = i % 100;\n  if (j === 1 && k !== 11) {\n    return 'st';\n  }\n  if (j === 2 && k !== 12) {\n    return 'nd';\n  }\n  if (j === 3 && k !== 13) {\n    return 'rd';\n  }\n  return 'th';\n};","import React, { useState, useMemo } from \"react\";\nimport {\n  NavLink, useHistory\n} from \"react-router-dom\";\nimport {\n  Button,\n  Input,\n  Row,\n  FormGroup,\n  Label,\n  Col,\n} from \"reactstrap\";\nimport Contest from \"../../interfaces/Contest\";\nimport { dateToString } from \"../../utils\";\n\ninterface Props {\n  paramUsers: string;\n  paramContest: string;\n  contests: Contest[];\n}\n\nconst generatePath = (contest: string, user: string): string => `/chart/${contest}/${user}`;\nconst getContestDropdownLabel = (contest: Contest): string =>\n  `${dateToString(new Date(contest.start_time_unix * 1000), 'YYYY-MM-DD')}　${contest.contest_name}`;\n\nexport const FormBlock: React.FC<Props> = (props) => {\n  const { paramUsers, paramContest, contests } = props;\n  const [contest, setContest] = useState(paramContest !== '' ? paramContest : 'ahc001');\n  const [user, setUser] = useState(paramUsers);\n  const chartPagePath = useMemo(() => generatePath(contest, user), [contest, user]);\n  const history = useHistory();\n\n  return (\n    <>\n      <Row>\n        <Col sm={12}>\n          <FormGroup style={{ width: '100%' }}>\n            <Label>CONTEST:</Label>\n            <Input type=\"select\" name=\"input-contest\" id=\"input-contest\"\n              value={contest}\n              onChange={(e): void => setContest(e.target.value)}>\n              {contests.map((_contest: Contest) => {\n                return (\n                  <option\n                    value={_contest.contest_slug}\n                    key={_contest.contest_slug}\n                  >{getContestDropdownLabel(_contest)}</option>\n                )\n              })}\n            </Input>\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12}>\n          <FormGroup style={{ width: '100%' }}>\n            <Label for='input-user'>ATCODER ID (COMMA SEPARATED):</Label>\n            <Input\n              value={user}\n              type=\"text\"\n              name=\"input-user\"\n              id=\"input-user\"\n              placeholder={user ? user : \"user1,user2,...\"}\n              onChange={(e): void => setUser(e.target.value)}\n              onKeyPress={(e): void => {\n                if (e.key === \"Enter\") {\n                  history.push(chartPagePath);\n                }\n              }}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12}>\n          <Button color=\"primary\" tag={NavLink} to={chartPagePath} block>\n            Replay!\n          </Button>\n        </Col>\n      </Row>\n    </>\n  )\n}","export class BinaryIndexedTree {\n  data: number[];\n  length: number;\n  constructor(_length: number) {\n    this.length = _length;\n    this.data = Array(++_length).fill(0);\n  }\n  sum(k: number): number {\n    let ret: number = 0;\n    for (++k; k > 0; k -= k & -k) ret += this.data[k];\n    return ret;\n  }\n  add(k: number, x: number): void {\n    for (++k; k < this.data.length; k += k & -k) this.data[k] += x;\n  }\n  // query for [l, r)\n  query(l: number, r: number): number { return this.sum(r - 1) - this.sum(l - 1); }\n}","import Submission from \"../interfaces/Submission\";\nimport { BinaryIndexedTree } from \"./BinaryIndexedTree\";\n\nclass ContestUserState {\n  taskScoreMap: Map<string, number>;\n  score: number;\n  afterTargetUser: boolean;\n  constructor() {\n    this.taskScoreMap = new Map<string, number>();\n    this.score = 0;\n    this.afterTargetUser = false;\n  }\n  addSubmission(contestSubmission: Submission): void {\n    let val = contestSubmission.score;\n    if (this.taskScoreMap.has(contestSubmission.task)) {\n      const curVal = this.taskScoreMap.get(contestSubmission.task) as number;\n      if (curVal > val) return;\n      this.score += (val - curVal);\n    } else {\n      this.score += val;\n    }\n    this.taskScoreMap.set(contestSubmission.task, val);\n  }\n}\n\nexport interface RankChartData {\n  user: string;\n  time_unix: number;\n  rank: number;\n  score: number;\n  type: 'update' | 'overtook';\n  task: string;\n  status: string;\n  oldScore?: number;\n  overtakeUserName?: string;\n  overtakeUserOldScore?: number;\n  overtakeUserNewScore?: number;\n}\n\nexport const getRankSequence = (user: string, contestSubmissions: Submission[]): RankChartData[] => {\n  if (!contestSubmissions.some((contestSubmission: Submission): boolean => (contestSubmission.user_name === user))) {\n    return [] as RankChartData[];\n  }\n  // assert ユーザがいる\n\n  // 一度目のシミュレート（各ユーザの得点計算のみ）\n  const scoreSet = new Set<number>();\n  scoreSet.add(0);\n  let userLength;\n  {\n    const userSubmissionsMap = new Map<string, Submission[]>();\n    contestSubmissions.forEach((contestSubmission: Submission): void => {\n      if (userSubmissionsMap.has(contestSubmission.user_name)) {\n        userSubmissionsMap.get(contestSubmission.user_name)?.push(contestSubmission);\n      } else {\n        userSubmissionsMap.set(contestSubmission.user_name, [contestSubmission]);\n      }\n    });\n    userLength = userSubmissionsMap.size;\n\n    userSubmissionsMap.forEach((userSubmissions: Submission[], user_name: string): void => {\n      const contestUserState = new ContestUserState();\n      userSubmissions.forEach((contestSubmission: Submission): void => {\n        contestUserState.addSubmission(contestSubmission);\n        scoreSet.add(contestUserState.score);\n      });\n    });\n  }\n\n  // 得点一覧を生成\n  const scores: number[] = Array.from(scoreSet.values());\n  void scores.sort((a, b) => a - b);\n\n  // 座圧用辞書を作成\n  const compress = new Map<number, number>();\n  scores.forEach((score: number, index: number): void => {\n    compress.set(score, index);\n  });\n\n  // 二度目のシミュレート（各段階における順位の計算）\n  const bit: BinaryIndexedTree = new BinaryIndexedTree(scores.length); // 各得点に何人いるか\n  bit.add(compress.get(0) as number, userLength); // 全員を 0 点として扱う\n  let curScore = 0;\n  let curRank = 1;\n  const seq: RankChartData[] = [];\n  {\n    const userStateMap = new Map<string, ContestUserState>();\n    contestSubmissions.forEach((contestSubmission: Submission): void => {\n      if (!userStateMap.has(contestSubmission.user_name)) {\n        const tmpUserState = new ContestUserState();\n        tmpUserState.afterTargetUser = true;\n        userStateMap.set(contestSubmission.user_name, tmpUserState);\n      }\n      const contestUserState = userStateMap.get(contestSubmission.user_name) as ContestUserState;\n      const oldScore = contestUserState.score;\n      // const oldAfterTargetUser = contestUserState.afterTargetUser;\n      contestUserState.addSubmission(contestSubmission);\n      // contestUserState.afterTargetUser = false;\n      const newScore = contestUserState.score;\n      if (newScore !== oldScore) { // スコア更新\n        const oldIndex = compress.get(oldScore) as number;\n        const newIndex = compress.get(newScore) as number;\n        bit.add(oldIndex, -1);\n        bit.add(newIndex, 1);\n        if (contestSubmission.user_name === user) {\n          // curScore 以上の得点を取っている人数が順位\n          curScore = newScore;\n          curRank = bit.query(newIndex, scores.length);\n          seq.push({\n            user: user,\n            type: 'update',\n            time_unix: contestSubmission.time_unix,\n            rank: curRank,\n            score: newScore,\n            oldScore: oldScore,\n            task: contestSubmission.task,\n            status: contestSubmission.status,\n          });\n        } else {\n          if (newScore < curScore) {\n            // 追い越さなかった\n            contestUserState.afterTargetUser = false;\n            return;\n          } else if (newScore === curScore) { // 同点になったけど追い越さなかった\n            contestUserState.afterTargetUser = true;\n            return;\n          } else { // 追い越したか，あるいは最初から高い順位にいるか\n            if (oldScore > curScore) {\n              // 最初から得点が高い\n              contestUserState.afterTargetUser = false;\n              return;\n            } else if (oldScore === curScore && !contestUserState.afterTargetUser) {\n              // ターゲットユーザよりも先に今の得点を取っていた\n              return;\n            }\n            // assert 追い越した\n            // console.log(`${oldScore} -> (${curScore}) -> ${newScore}`);\n            seq.push({\n              user: user,\n              type: 'overtook',\n              time_unix: contestSubmission.time_unix,\n              rank: ++curRank,\n              score: curScore,\n              overtakeUserName: contestSubmission.user_name,\n              overtakeUserOldScore: oldScore,\n              overtakeUserNewScore: newScore,\n              task: contestSubmission.task,\n              status: contestSubmission.status,\n            });\n            contestUserState.afterTargetUser = false;\n          }\n        }\n      }\n    });\n  }\n  return seq;\n}","import { dateToString } from \".\";\nimport Contest from \"../interfaces/Contest\";\n\nexport const getDatetimeTicks = (contest: Contest): number[] => {\n  const contestDurationHours = (contest.end_time_unix - contest.start_time_unix) / 3600;\n  let interval_sec = 3600;\n  if (contestDurationHours <= 6) {\n    interval_sec = 1800; // 6 時間以内なら 0.5 時間ごとに\n  } else if (contestDurationHours <= 12) {\n    interval_sec = 3600; // 12 時間以内なら 1 時間ごとに\n  } else if (contestDurationHours <= 24) {\n    interval_sec = 3600 * 2; // 24 時間以内なら 2 時間ごとに\n  } else if (contestDurationHours <= 24 * 3) {\n    interval_sec = 3600 * 6; // 3 日以内なら 6 時間ごとに\n  } else {\n    interval_sec = 3600 * 24; // 1 日ごと\n  }\n  const ret: number[] = [contest.start_time_unix];\n  for (let cur = contest.start_time_unix - ((contest.start_time_unix + 3600 * 9) % interval_sec) + interval_sec;\n    cur < contest.end_time_unix; cur += interval_sec) {\n    ret.push(cur);\n  }\n  ret.push(contest.end_time_unix);\n  return ret;\n};\n\nexport const getDatetimeTickFormatter = (contest: Contest): ((time_unix: number) => string) => {\n  const contestDurationHours = (contest.end_time_unix - contest.start_time_unix) / 3600;\n  let format = '';\n  if (contestDurationHours <= 12) {\n    format = 'hh:mm'; // 12 時間以内なら 1 時間ごとに\n  } else if (contestDurationHours <= 24) {\n    format = 'hh:mm'; // 24 時間以内なら 2 時間ごとに\n  } else if (contestDurationHours <= 24 * 3) {\n    format = 'MM/DD hh:mm'; // 3 日以内なら 6 時間ごとに\n  } else {\n    format = 'MM/DD'; // 1 日ごと\n  }\n  return ((time_unix: number) => dateToString(new Date(time_unix * 1000), format));\n};\n\nexport const scoreTickFormatter = (score: number): string => {\n  let curScore = score;\n  let digitlen = 0;\n  while (curScore >= 10) {\n    curScore /= 10;\n    digitlen++;\n  }\n  return `${curScore.toFixed(1)}e${digitlen}`;\n};\n\nexport const chartLineColors = ['#1F77B4', '#FF7F0E', '#2CA02C', '#D62728', '#9467BD', '#8C564B', '#E377C2', '#7D7F7F', '#BCBD22', '#17BECF'];\nexport const getChartLineColor = (index: number): string => chartLineColors[index % chartLineColors.length];","import React from \"react\";\nimport { ordinalSuffixOf } from \"../../utils\";\nimport { RankChartData } from \"../../utils/RankReproducer\";\n\ninterface Props {\n  index?: number;\n  offset?: number;\n  position?: string;\n  value?: number;\n  viewBox?: {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n  };\n  x?: number;\n  y?: number;\n  color: string;\n  rankChartDataSequence: RankChartData[];\n}\n\nexport const RankLineChartLabel: React.FC<Props> = (props) => {\n  const { index, x, y, color, rankChartDataSequence } = props;\n  if (index === undefined) return <></>;\n  if (x === undefined || y === undefined) return <></>;\n  const data: RankChartData = rankChartDataSequence[index];\n  if (data.type !== 'update') return <></>;\n  const fontSize = 14;\n  const offset = 10;\n  const text = `${data.rank}${ordinalSuffixOf(data.rank)}`;\n  const fillId = `solid-${data.user}-${index}`;\n  return (\n    <g>\n      <defs>\n        <filter x=\"-0.05\" y=\"-0.07\" width=\"1.1\" height=\"1.1\" id={fillId}>\n          <feFlood floodColor={color} />\n          <feComposite in=\"SourceGraphic\" operator=\"xor\" />\n        </filter>\n      </defs>\n      <text filter={`url(#${fillId})`} x={x} y={y - offset} fontSize={fontSize} fill='none'>{text}</text>\n      <text x={x} y={y - offset} fontSize={fontSize} fill='white'>{text}</text>\n    </g>\n  );\n}","import React from 'react';\nimport { dateToString } from '../../utils';\nimport { RankChartData } from '../../utils/RankReproducer';\n\ninterface RankLineChartTooltipPayloadContainer {\n  color: string;\n  dataKey: string; // rank\n  fill: string;\n  name: string; // atcoder user name\n  stroke: string;\n  strokeWidth: number;\n  value: number;\n  payload: RankChartData;\n}\n\ninterface Props {\n  active?: boolean;\n  payload?: RankLineChartTooltipPayloadContainer[];\n  label?: number;\n}\n\nexport const RankLineChartTooltip: React.FC<Props> = (props) => {\n  const { active, payload, label } = props;\n  if (!active || payload === undefined || label === undefined) return <></>;\n  return (\n    <div\n      className=\"recharts-default-tooltip\"\n      style={{\n        margin: '0px',\n        padding: '10px',\n        backgroundColor: 'rgb(255, 255, 255)',\n        border: '1px solid rgb(204, 204, 204)',\n        whiteSpace: 'nowrap',\n      }}\n    >\n      <p className=\"recharts-tooltip-label\" style={{ margin: '0px' }}>\n        {dateToString(new Date(label * 1000))}\n      </p>\n      {payload.map((payloadContainer: RankLineChartTooltipPayloadContainer) => {\n        const curPayload: RankChartData = payloadContainer.payload;\n        if (payloadContainer.name !== curPayload.user || label !== curPayload.time_unix) {\n          return undefined;\n        }\n        return (\n          <div key={payloadContainer.name}>\n            <hr style={{ marginTop: \"0.3em\", marginBottom: \"0.3em\" }} />\n            <div style={{ color: payloadContainer.stroke }} >{`User: ${payloadContainer.name}`}</div>\n            <ul\n              className=\"recharts-tooltip-item-list\"\n              style={{ padding: '0px', margin: '0px' }}\n            >\n              <li\n                className=\"recharts-tooltip-item\"\n                style={{\n                  display: 'block',\n                  paddingTop: '4px',\n                  paddingBottom: '4px',\n                  color: 'rgb(136, 132, 216)',\n                }}\n              >\n                <span className=\"recharts-tooltip-item-name\">Rank</span>\n                <span className=\"recharts-tooltip-item-separator\"> : </span>\n                <span className=\"recharts-tooltip-item-value\">\n                  {curPayload.rank}\n                </span>\n                <span className=\"recharts-tooltip-item-unit\" />\n              </li>\n            </ul>\n            <div style={{ fontSize: 10 }}>\n              {curPayload.type === 'update' ? (\n                <>\n                  <div>得点を更新しました:</div>\n                  <div>\n                    <span style={{ color: payloadContainer.stroke }}>{curPayload.oldScore}</span>\n                    {' → '}\n                    <span style={{ color: payloadContainer.stroke }}>{curPayload.score}</span>\n                  </div>\n                  <div>{`(${curPayload.task} ${curPayload.status})`}</div>\n                </>\n              ) : (\n                <>\n                  <div>{`${curPayload.overtakeUserName} さんに追い抜かれました:`}</div>\n                  <div>{`${payloadContainer.name}: `}<span style={{ color: payloadContainer.stroke }}>{curPayload.score}</span></div>\n                  <div>{`${curPayload.overtakeUserName}: ${curPayload.overtakeUserOldScore} → ${curPayload.overtakeUserNewScore}`}</div>\n                  <div style={{ marginLeft: '1em' }}>{`(${curPayload.task} ${curPayload.status})`}</div>\n                </>\n              )}\n            </div>\n          </div>\n        )\n      }).filter(element => element !== undefined)}\n    </div>\n  );\n};","import React from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Label, LabelList } from 'recharts';\nimport Contest from \"../../interfaces/Contest\";\nimport { getChartLineColor, getDatetimeTickFormatter, getDatetimeTicks } from \"../../utils/Chart\";\nimport { RankChartData } from \"../../utils/RankReproducer\";\nimport { RankLineChartLabel } from \"./RankLineChartLabel\";\nimport { RankLineChartTooltip } from \"./RankLineChartTooltip\";\n\ninterface Props {\n  sequences: [string, RankChartData[]][];\n  contest: Contest;\n  showDots: boolean;\n  showACLabels: boolean;\n}\n\nexport const RankLineChart: React.FC<Props> = (props) => {\n  const { sequences, contest, showDots, showACLabels } = props;\n\n  return (\n    <div style={{ width: '100%', height: '500px', marginTop: '50px' }}>\n      <ResponsiveContainer>\n        <LineChart\n          width={1000}\n          height={500}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis type=\"number\" dataKey=\"time_unix\" name=\"unixtime\" domain={[contest.start_time_unix, contest.end_time_unix]}\n            tickFormatter={getDatetimeTickFormatter(contest)} ticks={getDatetimeTicks(contest)}>\n            <Label value=\"Datetime\" offset={0} position=\"insideBottom\" />\n          </XAxis>\n          <YAxis type=\"number\" name=\"rank\" label={{ value: 'Rank', angle: -90, position: 'insideLeft' }} reversed />\n          <Tooltip\n            content={\n              <RankLineChartTooltip />\n            }\n          />\n          <Legend />\n          {\n            sequences.map((entry: [string, RankChartData[]], index: number) => {\n              const [user, seq] = entry;\n              const color = getChartLineColor(index);\n              return (\n                <Line\n                  key={user}\n                  data={seq}\n                  name={user} dataKey=\"rank\" type='stepAfter'\n                  stroke={color}\n                  dot={showDots && { fillOpacity: 0.2, strokeWidth: 1 }}>\n                  {showACLabels && (\n                    <LabelList dataKey=\"label\" position=\"top\" content={\n                      <RankLineChartLabel\n                        color={color}\n                        rankChartDataSequence={seq} />\n                    } />\n                  )}\n                </Line>\n              );\n            })\n          }\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};","import React from \"react\";\nimport { RankChartData } from \"../../utils/RankReproducer\";\n\ninterface Props {\n  index?: number;\n  offset?: number;\n  position?: string;\n  value?: number;\n  viewBox?: {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n  };\n  x?: number;\n  y?: number;\n  color: string;\n  rankChartDataSequence: RankChartData[];\n}\n\nexport const ScoreLineChartLabel: React.FC<Props> = (props) => {\n  const { index, x, y, color, rankChartDataSequence } = props;\n  if (index === undefined) return <></>;\n  if (x === undefined || y === undefined) return <></>;\n  const data: RankChartData = rankChartDataSequence[index];\n  if (data.type !== 'update') return <></>;\n  const fontSize = 14;\n  const offset = 10;\n  const text = `${data.score}`;\n  const fillId = `solid-score-${data.user}-${index}`;\n  return (\n    <g>\n      <defs>\n        <filter x=\"-0.05\" y=\"-0.07\" width=\"1.1\" height=\"1.1\" id={fillId}>\n          <feFlood floodColor={color} />\n          <feComposite in=\"SourceGraphic\" operator=\"xor\" />\n        </filter>\n      </defs>\n      <text filter={`url(#${fillId})`} x={x} y={y - offset} fontSize={fontSize} fill='none'>{text}</text>\n      <text x={x} y={y - offset} fontSize={fontSize} fill='white'>{text}</text>\n    </g>\n  );\n}","import React from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Label, LabelList } from 'recharts';\nimport Contest from \"../../interfaces/Contest\";\nimport { getChartLineColor, getDatetimeTickFormatter, getDatetimeTicks, scoreTickFormatter } from \"../../utils/Chart\";\nimport { RankChartData } from \"../../utils/RankReproducer\";\nimport { RankLineChartTooltip } from \"./RankLineChartTooltip\";\nimport { ScoreLineChartLabel } from \"./ScoreLineChartLabel\";\n\ninterface Props {\n  sequences: [string, RankChartData[]][];\n  contest: Contest;\n  showDots: boolean;\n  showACLabels: boolean;\n}\n\nexport const ScoreLineChart: React.FC<Props> = (props) => {\n  const { sequences, contest, showDots, showACLabels } = props;\n\n  const scoreUpdateSequences: [string, RankChartData[]][] = sequences.map(\n    ([user, rankChartDataSequence]): [string, RankChartData[]] =>\n      [user, rankChartDataSequence.filter(rankChartData => rankChartData.type === 'update')]\n  );\n\n  return (\n    <div style={{ width: '100%', height: '500px', marginTop: '50px' }}>\n      <ResponsiveContainer>\n        <LineChart\n          width={1000}\n          height={500}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis type=\"number\" dataKey=\"time_unix\" name=\"unixtime\" domain={[contest.start_time_unix, contest.end_time_unix]}\n            tickFormatter={getDatetimeTickFormatter(contest)} ticks={getDatetimeTicks(contest)}>\n            <Label value=\"Datetime\" offset={0} position=\"insideBottom\" />\n          </XAxis>\n          <YAxis type=\"number\" name=\"score\" label={{ value: 'Score', angle: -90, position: 'insideLeft' }}\n            tickFormatter={scoreTickFormatter} />\n          <Tooltip\n            content={\n              <RankLineChartTooltip />\n            }\n          />\n          <Legend />\n          {\n            scoreUpdateSequences.map((entry: [string, RankChartData[]], index: number) => {\n              const [user, seq] = entry;\n              const color = getChartLineColor(index);\n              return (\n                <Line\n                  key={user}\n                  data={seq}\n                  name={user} dataKey=\"score\" type='stepAfter'\n                  stroke={color}\n                  dot={showDots && { fillOpacity: 0.2, strokeWidth: 1 }}>\n                  {showACLabels && (\n                    <LabelList dataKey=\"label\" position=\"top\" content={\n                      <ScoreLineChartLabel\n                        color={color}\n                        rankChartDataSequence={seq} />\n                    } />\n                  )}\n                </Line>\n              );\n            })\n          }\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};","import React from \"react\";\nimport { connect, PromiseState } from \"react-refetch\";\nimport { fetchContests, fetchContestSubmissions } from \"../../utils/Data\";\nimport Contest from \"../../interfaces/Contest\";\nimport Submission from \"../../interfaces/Submission\";\nimport { FormBlock } from \"./FormBlock\";\nimport { ChartBlock } from \"./ChartBlock\";\n\ninterface OuterProps {\n  match: {\n    params: {\n      contest: string;\n      user: string;\n    }\n  }\n}\n\ninterface InnerProps extends OuterProps {\n  readonly contestsFetch: PromiseState<Contest[]>;\n  readonly contestSubmissionsFetch: PromiseState<Submission[]>;\n}\n\nconst InnerChartPage: React.FC<InnerProps> = (props) => {\n  const { contestsFetch, contestSubmissionsFetch } = props;\n  const contests: Contest[] = contestsFetch.fulfilled ? contestsFetch.value : [];\n  const contestSubmissions: Submission[] = contestSubmissionsFetch.fulfilled\n    ? contestSubmissionsFetch.value\n    : [];\n\n  const paramContest: string = props.match.params.contest ?? \"\";\n  const paramUser: string = props.match.params.user ?? \"\";\n\n  const users = paramUser.split(',').map(_user => _user.trim()).filter(_user => _user !== '');\n\n  const contestMap = contests.reduce((prevMap: Map<string, Contest>, contest: Contest): Map<string, Contest> =>\n    prevMap.set(contest.contest_slug, contest)\n    , new Map<string, Contest>());\n  return (\n    <>\n      <h2>Description</h2>\n      <p><a href=\"https://atcoder-replay.kakira.dev/\" target=\"_blank\" rel=\"noreferrer\">AtCoder Replay (β)</a>\n      がマラソンに対応していなかったので作りました．</p>\n\n      <h2>Let's Replay!</h2>\n      <FormBlock paramUsers={paramUser} paramContest={paramContest} contests={contests} />\n\n      <ChartBlock\n        users={users}\n        contest={contestMap.get(paramContest)}\n        contestSubmissions={contestSubmissions} />\n\n      <h2>補足</h2>\n      <p>AHC001 は最終提出のプレテスト得点不明につき，各ユーザの最終提出のスコアは，システス結果 * 50 / 1000 を用いています．</p>\n      <p>日立北大2020 は最終提出のプレテスト得点不明につき，各ユーザの最終提出のスコアは，システス結果 * 16 / 200 を用いています．</p>\n    </>\n  )\n};\n\nexport const ChartPage = connect<InnerProps>((props) => {\n  return ({\n    contestsFetch: {\n      value: fetchContests(),\n    },\n    contestSubmissionsFetch: {\n      comparison: [props.match.params.contest],\n      value: fetchContestSubmissions(props.match.params.contest),\n    },\n  })\n})(InnerChartPage);\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom';\nimport { Container, Navbar, NavbarBrand } from 'reactstrap';\nimport { ChartPage } from \"./pages/chart\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar color=\"light\" light expand=\"lg\" fixed=\"top\">\n          <NavbarBrand tag={Link} to={'/'}>AtCoder Marathon Replay</NavbarBrand>\n        </Navbar>\n        <Container style={{ width: '100%', maxWidth: '90%', marginTop: '80px' }}>\n          <Switch>\n            <Route exact path=\"/chart/:contest/:user\" component={ChartPage} />\n            <Route exact path=\"/chart/\" component={ChartPage} />\n            <Redirect path=\"/\" to=\"/chart/\" />\n          </Switch>\n        </Container>\n        <footer className=\"footer\" style={{ marginTop: '30px', padding: '30px', backgroundColor: '#efefef' }}>\n          <div className=\"container\">連絡先: <a href=\"https://twitter.com/iiljj\">si (@iiljj) / Twitter</a></div></footer>\n      </Router>\n    </div >\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}